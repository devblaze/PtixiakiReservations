@model PtixiakiReservations.Models.Event

@{
    ViewData["Title"] = "Reserve Seats";
    var venueId = Model.Venue.Id;
    var eventId = Model.Id;
    var subAreaId = Model.SubAreaId;
}

<div class="container mx-auto px-4 py-8 max-w-6xl">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Header with gradient background -->
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 py-6 px-8">
            <h1 class="text-3xl font-bold text-white">Reserve Seats</h1>
            <p class="text-blue-100 mt-2">@Model.Name</p>
            @if (Model.SubArea != null)
            {
                <p class="text-blue-200 text-sm mt-1">Sub Area: @Model.SubArea.AreaName</p>
            }
        </div>

        <div class="p-6">
            <!-- Event Summary & Time Selection -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <!-- Event Summary -->
                <div class="md:col-span-1 bg-blue-50 p-5 rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Event Details</h3>

                    <div class="space-y-3">
                        <div class="flex items-start">
                            <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-700">
                                    @Model.StartDateTime.ToString("dddd, MMMM d, yyyy")
                                </p>
                                <p class="text-sm text-gray-600">
                                    @Model.StartDateTime.ToString("h:mm tt") - @Model.EndTime.ToString("h:mm tt")
                                </p>
                            </div>
                        </div>

                        <div class="flex items-start">
                            <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-700">@Model.Venue.Name</p>
                                @if (Model.Venue.City != null)
                                {
                                    <p class="text-sm text-gray-600">@Model.Venue.City.Name</p>
                                }
                                @if (Model.SubArea != null)
                                {
                                    <p class="text-sm text-gray-600">Area: @Model.SubArea.AreaName</p>
                                }
                            </div>
                        </div>

                        @if (Model.EventType != null)
                        {
                            <div class="flex items-start">
                                <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                </svg>
                                <p class="text-sm text-gray-700">@Model.EventType.Name</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Time Selection -->
                <div class="md:col-span-2 bg-blue-50 p-5 rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Reservation Time</h3>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- Time inputs (hidden by default) -->
                        <div class="hidden">
                            <input type="hidden" id="startTime" value="@Model.StartDateTime.TimeOfDay" />
                            <input type="hidden" id="endTime" value="@Model.EndTime.TimeOfDay" />
                            <input type="hidden" id="eventDate" value="@Model.StartDateTime.ToString("yyyy-MM-dd")" />
                            <input type="hidden" id="subAreaId" value="@subAreaId" />
                            <input type="hidden" id="eventId" value="@eventId" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                            <div class="flex items-center space-x-3">
                                <input class="form-input w-full rounded-md shadow-sm border-gray-300 bg-white text-gray-800"
                                       type="time" id="reservationStartTime"
                                       value="@Model.StartDateTime.ToString("HH:mm")" />
                                <div class="flex items-center">
                                    <input type="checkbox" id="useEventStartTime" class="h-4 w-4 text-blue-600 border-gray-300 rounded" checked>
                                    <label for="useEventStartTime" class="ml-2 text-sm text-gray-700">From Start</label>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                            <div class="flex items-center space-x-3">
                                <input class="form-input w-full rounded-md shadow-sm border-gray-300 bg-white text-gray-800"
                                       type="time" id="reservationEndTime"
                                       value="@Model.EndTime.ToString("HH:mm")" />
                                <div class="flex items-center">
                                    <input type="checkbox" id="useEventEndTime" class="h-4 w-4 text-blue-600 border-gray-300 rounded" checked>
                                    <label for="useEventEndTime" class="ml-2 text-sm text-gray-700">Until End</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Only show sub area message if no sub area is set -->
            @if (subAreaId == null || subAreaId == 0)
            {
                <div class="mb-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                    <div class="flex items-center">
                        <svg class="h-6 w-6 text-yellow-600 mr-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                        </svg>
                        <div>
                            <h3 class="text-yellow-800 font-medium">No Sub Area Selected</h3>
                            <p class="text-yellow-700 text-sm mt-1">This event doesn't have a specific sub area assigned. Seat selection is not available.</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Seat Selection Section -->
                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Select Your Seats</h3>

                    <!-- Canvas with better framing -->
                    <div class="mb-6 flex justify-center">
                        <div class="relative">
                            <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-medium z-10">
                                Stage
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg border-2 border-gray-200">
                                <canvas id="seatCanvas" width="600" height="400" class="rounded-md shadow-inner"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Legend with improved styling -->
                    <div class="mb-6 bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-center text-gray-700 font-semibold mb-3">Seat Legend</h3>
                        <div class="flex justify-center flex-wrap gap-6">
                            <div class="flex items-center">
                                <div class="w-5 h-5 bg-green-500 rounded mr-2 shadow-sm"></div>
                                <span class="text-sm text-gray-700">Available</span>
                            </div>
                            <div class="flex items-center">
                                <div class="w-5 h-5 bg-red-500 rounded mr-2 shadow-sm"></div>
                                <span class="text-sm text-gray-700">Unavailable</span>
                            </div>
                            <div class="flex items-center">
                                <div class="w-5 h-5 bg-blue-500 rounded mr-2 shadow-sm"></div>
                                <span class="text-sm text-gray-700">Selected</span>
                            </div>
                        </div>
                    </div>

                    <!-- Selected seats summary -->
                    <div id="selection-summary" class="mb-6 hidden">
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <h3 class="text-blue-800 font-medium mb-2">Your Selection</h3>
                            <div class="flex items-center">
                                <div class="mr-3">
                                    <span id="selected-count" class="text-2xl font-bold text-blue-600">0</span>
                                    <span class="text-blue-600">seats</span>
                                </div>
                                <div id="selected-seats-list" class="text-sm text-blue-800">
                                    <!-- Will be populated by JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action buttons -->
                <div class="flex flex-col sm:flex-row gap-3 justify-center">
                    <button id="clear-selection" class="px-5 py-3 border border-gray-300 text-gray-700 font-medium rounded-md shadow-sm hover:bg-gray-50 transition-duration-150 hidden">
                        Clear Selection
                    </button>

                    <button id="confirm-reservation" class="px-6 py-3 bg-blue-600 text-white font-medium rounded-md shadow-md hover:bg-blue-700 transition-duration-150 flex items-center justify-center">
                        <span>Complete Reservation</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- Back Button -->
    <div class="mt-8">
        <a href="@Url.Action("Details", "Events", new { id = Model.Id })" class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Event Details
        </a>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <script>
        const eventId = @eventId;
        const venueId = @venueId;
        const subAreaId = @(subAreaId ?? 0);
        let selectedSeats = [];
        let seatNames = {};
        let fabricCanvas;

        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Fabric.js canvas
            fabricCanvas = new fabric.Canvas('seatCanvas', {
                selection: false // Disable group selection
            });

            const subAreaIdElement = document.getElementById('subAreaId');
            const eventIdElement = document.getElementById('eventId');
            
            if (subAreaIdElement && eventIdElement) {
                const subAreaIdValue = subAreaIdElement.value;
                const eventIdValue = eventIdElement.value;
                
                console.log("SubArea ID:", subAreaIdValue, "Event ID:", eventIdValue);
                
                // Only initialize seat map if we have a sub area
                if (subAreaIdValue && subAreaIdValue !== '0') {
                    loadSeatMap(subAreaIdValue, eventIdValue);
                }
            }
        });

        function loadSeatMap(subAreaId, eventId) {
            console.log("Loading seat map for SubArea:", subAreaId, "Event:", eventId);
            
            // Show loading indicator
            showLoadingOnFabric(fabricCanvas);

            // Fetch seats for this sub area and event
            $.getJSON(`/Seat/get_data?SubAreaId=${subAreaId}&eventId=${eventId}`, function(data) {
                console.log("Seat data received:", data);
                fabricCanvas.clear();

                if (data && data.length > 0) {
                    // Render seats on the canvas
                    renderSeats(fabricCanvas, data);
                } else {
                    // Show message if no seats available
                    showNoSeatsMessageOnFabric(fabricCanvas);
                }
            }).fail(function(xhr, status, error) {
                console.error("Failed to load seat data:", status, error);
                fabricCanvas.clear();
                showErrorMessageOnFabric(fabricCanvas);
            });
        }

        $(document).ready(function () {
            // Handle checkbox states for time inputs
            $("#useEventStartTime").on("change", function() {
                if ($(this).is(':checked')) {
                    $("#reservationStartTime").val('@Model.StartDateTime.ToString("HH:mm")');
                    $("#reservationStartTime").prop('disabled', true);
                } else {
                    $("#reservationStartTime").prop('disabled', false);
                }
            });

            $("#useEventEndTime").on("change", function() {
                if ($(this).is(':checked')) {
                    $("#reservationEndTime").val('@Model.EndTime.ToString("HH:mm")');
                    $("#reservationEndTime").prop('disabled', true);
                } else {
                    $("#reservationEndTime").prop('disabled', false);
                }
            });

            // Initial state
            if ($("#useEventStartTime").is(':checked')) {
                $("#reservationStartTime").prop('disabled', true);
            }

            if ($("#useEventEndTime").is(':checked')) {
                $("#reservationEndTime").prop('disabled', true);
            }

            // Handle confirm button click
            $("#confirm-reservation").on("click", function () {
                if (selectedSeats.length > 0) {
                    const reservationSubAreaId = subAreaId;

                    if (!reservationSubAreaId || reservationSubAreaId === 0) {
                        showNotification('No sub area assigned to this event.', 'warning');
                        return;
                    }

                    console.log("Making reservation for SubArea:", reservationSubAreaId, "Seats:", selectedSeats);

                    // Show loading state
                    $(this).prop('disabled', true)
                        .html('<svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Processing...');

                    // Get reservation times
                    const startTime = $("#useEventStartTime").is(":checked")
                        ? $("#startTime").val()
                        : $("#reservationStartTime").val();

                    const endTime = $("#useEventEndTime").is(":checked")
                        ? $("#endTime").val()
                        : $("#reservationEndTime").val();

                    // Calculate duration
                    const timeStart = new Date(`2000-01-01T${startTime}`);
                    const timeEnd = new Date(`2000-01-01T${endTime}`);
                    const difference = timeEnd - timeStart;

                    if (difference <= 0) {
                        showNotification('End time must be after start time.', 'error');
                        $(this).prop('disabled', false)
                            .html('<span>Complete Reservation</span><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>');
                        return;
                    }

                    // Format duration as HH:MM:SS
                    const hours = Math.floor(difference / 3600000).toString().padStart(2, '0');
                    const minutes = Math.floor((difference % 3600000) / 60000).toString().padStart(2, '0');
                    const seconds = Math.floor((difference % 60000) / 1000).toString().padStart(2, '0');
                    const duration = `${hours}:${minutes}:${seconds}`;

                    // Get reservation date
                    const eventDate = $("#eventDate").val();
                    const reservationDate = `${eventDate}T${startTime}`;

                    // Submit reservation
                    $.ajax({
                        url: `/Reservation/MakeRes`,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({
                            seatIds: selectedSeats,
                            eventId: eventId,
                            subAreaId: reservationSubAreaId,
                            duration: duration,
                            resDate: reservationDate
                        }),
                        success: function(response) {
                            showNotification('Reservation successful!', 'success');
                            setTimeout(() => {
                                window.location.href = "/Reservation/Index";
                            }, 1500);
                        },
                        error: function(xhr) {
                            // Reset button
                            $("#confirm-reservation").prop('disabled', false)
                                .html('<span>Complete Reservation</span><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>');

                            let errorMessage = "Failed to reserve seats. Please try again.";
                            if (xhr.responseText) {
                                try {
                                    const response = JSON.parse(xhr.responseText);
                                    if (typeof response === 'string') {
                                        errorMessage = response;
                                    }
                                } catch (e) {
                                    errorMessage = xhr.responseText;
                                }
                            }
                            showNotification(errorMessage, 'error');
                        }
                    });
                } else {
                    showNotification('Please select at least one seat.', 'warning');
                }
            });

            // Clear selection button
            $("#clear-selection").on("click", function() {
                clearAllSelections(fabricCanvas);
            });
        });

        // Fabric.js helper functions
        function showLoadingOnFabric(canvas) {
            const loadingText = new fabric.Text('Loading seats...', {
                left: 300,
                top: 200,
                originX: 'center',
                originY: 'center',
                fill: '#4a5568',
                fontSize: 18
            });
            canvas.add(loadingText);
            canvas.renderAll();
        }

        function showNoSeatsMessageOnFabric(canvas) {
            const noSeatsText = new fabric.Text('No seats available for this area', {
                left: 300,
                top: 200,
                originX: 'center',
                originY: 'center',
                fill: '#666',
                fontSize: 18
            });
            canvas.add(noSeatsText);
            canvas.renderAll();
        }

        function showErrorMessageOnFabric(canvas) {
            const errorText = new fabric.Text('Failed to load seat data. Please try again.', {
                left: 300,
                top: 200,
                originX: 'center',
                originY: 'center',
                fill: '#e53e3e',
                fontSize: 18
            });
            canvas.add(errorText);
            canvas.renderAll();
        }

        function renderSeats(canvas, seats) {
            console.log("Rendering seats:", seats);
            
            // Clear canvas first
            canvas.clear();

            // // Add stage indicator
            // const stageRect = new fabric.Rect({
            //     width: 200,
            //     height: 20,
            //     fill: '#1a365d',
            //     originX: 'center',
            //     originY: 'center',
            //     rx: 5,
            //     ry: 5,
            //     left: 300,
            //     top: 30
            // });
            //
            // const stageText = new fabric.Text('STAGE', {
            //     left: 300,
            //     top: 30,
            //     originX: 'center',
            //     originY: 'center',
            //     fill: 'white',
            //     fontSize: 12,
            //     fontFamily: 'Arial'
            // });

            // canvas.add(stageRect);
            // canvas.add(stageText);

            // Render each seat
            seats.forEach(seat => {
                // Store seat name for later use
                seatNames[seat.id] = seat.name;
                
                // Create seat rectangle
                const seatRect = new fabric.Rect({
                    width: 30,
                    height: 30,
                    fill: seat.available ? '#4CAF50' : '#f44336', // Green for available, red for unavailable
                    stroke: '#333',
                    strokeWidth: 1,
                    rx: 5,
                    ry: 5,
                    left: seat.x,
                    top: seat.y + 60, // Offset to account for stage
                    originX: 'center',
                    originY: 'center'
                });

                // Create seat label
                const seatText = new fabric.Text(seat.name, {
                    left: seat.x,
                    top: seat.y + 60,
                    originX: 'center',
                    originY: 'center',
                    fill: 'white',
                    fontSize: 10,
                    fontFamily: 'Arial',
                    selectable: false
                });

                // Group seat rectangle and text together
                const seatGroup = new fabric.Group([seatRect, seatText], {
                    left: seat.x,
                    top: seat.y + 60,
                    originX: 'center',
                    originY: 'center',
                    selectable: seat.available,
                    hasControls: false,
                    hasBorders: false,
                    lockMovementX: true,
                    lockMovementY: true,
                    lockRotation: true,
                    lockScalingX: true,
                    lockScalingY: true
                });

                // Store seat data in the group
                seatGroup.seatId = seat.id;
                seatGroup.seatName = seat.name;
                seatGroup.available = seat.available;

                // Add click handler for available seats
                if (seat.available) {
                    seatGroup.on('mousedown', function() {
                        toggleSeatSelection(this, canvas);
                    });

                    seatGroup.set({
                        hoverCursor: 'pointer',
                        moveCursor: 'pointer'
                    });
                }

                canvas.add(seatGroup);
            });

            canvas.renderAll();
        }

        function toggleSeatSelection(seatGroup, canvas) {
            const seatId = seatGroup.seatId;
            const rect = seatGroup.item(0);

            if (selectedSeats.includes(seatId)) {
                // Deselect seat
                selectedSeats = selectedSeats.filter(id => id !== seatId);
                rect.set('fill', '#4CAF50'); // Green for available
            } else {
                // Select seat
                selectedSeats.push(seatId);
                rect.set('fill', '#2196F3'); // Blue for selected
            }

            updateSelectionSummary();
            canvas.renderAll();
        }

        function updateSelectionSummary() {
            const count = selectedSeats.length;

            if (count > 0) {
                $('#selection-summary').removeClass('hidden');
                $('#clear-selection').removeClass('hidden');
                $('#selected-count').text(count);

                const seatNamesList = selectedSeats
                    .map(id => seatNames[id])
                    .join(', ');

                $('#selected-seats-list').text(seatNamesList);
            } else {
                $('#selection-summary').addClass('hidden');
                $('#clear-selection').addClass('hidden');
            }
        }

        function clearAllSelections(canvas) {
            // Find all seat groups and reset to available
            canvas.getObjects('group').forEach(group => {
                if (group.available && group.seatId) {
                    const rect = group.item(0);
                    rect.set('fill', '#4CAF50'); // Green for available
                }
            });

            selectedSeats = [];
            updateSelectionSummary();
            canvas.renderAll();
        }

        // Legacy canvas helper functions (keeping for compatibility)
        function clearCanvas() {
            if (fabricCanvas) {
                fabricCanvas.clear();
            }
        }

        function showLoading() {
            if (fabricCanvas) {
                showLoadingOnFabric(fabricCanvas);
            }
        }

        function showNoSeatsMessage() {
            if (fabricCanvas) {
                showNoSeatsMessageOnFabric(fabricCanvas);
            }
        }

        function showErrorMessage() {
            if (fabricCanvas) {
                showErrorMessageOnFabric(fabricCanvas);
            }
        }

        function showNotification(message, type = 'info') {
            $('.notification').remove();

            let bgColor = 'bg-blue-500';
            if (type === 'success') bgColor = 'bg-green-500';
            if (type === 'error') bgColor = 'bg-red-500';
            if (type === 'warning') bgColor = 'bg-yellow-500';

            const notification = $(`
                <div class="notification fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50">
                    ${message}
                </div>
            `);
            
            $('body').append(notification);
            
            setTimeout(() => {
                notification.fadeOut(() => notification.remove());
            }, 5000);
        }
    </script>
}