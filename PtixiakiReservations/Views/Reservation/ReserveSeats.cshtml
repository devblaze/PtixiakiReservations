@model PtixiakiReservations.Models.Event

@{
    ViewData["Title"] = "Reserve Seats";
    var venueId = Model.Venue.Id;
    var eventId = Model.Id;
}

<div class="container mx-auto px-4 py-8 max-w-6xl">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Header with gradient background -->
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 py-6 px-8">
            <h1 class="text-3xl font-bold text-white">Reserve Seats</h1>
            <p class="text-blue-100 mt-2">@Model.Name</p>
        </div>

        <div class="p-6">
            <!-- Event Summary & Time Selection -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <!-- Event Summary -->
                <div class="md:col-span-1 bg-blue-50 p-5 rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Event Details</h3>

                    <div class="space-y-3">
                        <div class="flex items-start">
                            <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-700">
                                    @Model.StartDateTime.ToString("dddd, MMMM d, yyyy")
                                </p>
                                <p class="text-sm text-gray-600">
                                    @Model.StartDateTime.ToString("h:mm tt") - @Model.EndTime.ToString("h:mm tt")
                                </p>
                            </div>
                        </div>

                        <div class="flex items-start">
                            <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-700">@Model.Venue.Name</p>
                                @if (Model.Venue.City != null)
                                {
                                    <p class="text-sm text-gray-600">@Model.Venue.City.Name</p>
                                }
                            </div>
                        </div>

                        @if (Model.EventType != null)
                        {
                            <div class="flex items-start">
                                <svg class="h-5 w-5 text-blue-600 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                </svg>
                                <p class="text-sm text-gray-700">@Model.EventType.Name</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Time Selection -->
                <div class="md:col-span-2 bg-blue-50 p-5 rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Reservation Time</h3>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- Time inputs (hidden by default) -->
                        <div class="hidden">
                            <input type="hidden" id="startTime" value="@Model.StartDateTime.TimeOfDay" />
                            <input type="hidden" id="endTime" value="@Model.EndTime.TimeOfDay" />
                            <input type="hidden" id="eventDate" value="@Model.StartDateTime.ToString("yyyy-MM-dd")" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                            <div class="flex items-center space-x-3">
                                <input class="form-input w-full rounded-md shadow-sm border-gray-300 bg-white text-gray-800"
                                       type="time" id="reservationStartTime"
                                       value="@Model.StartDateTime.ToString("HH:mm")" />
                                <div class="flex items-center">
                                    <input type="checkbox" id="useEventStartTime" class="h-4 w-4 text-blue-600 border-gray-300 rounded" checked>
                                    <label for="useEventStartTime" class="ml-2 text-sm text-gray-700">From Start</label>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                            <div class="flex items-center space-x-3">
                                <input class="form-input w-full rounded-md shadow-sm border-gray-300 bg-white text-gray-800"
                                       type="time" id="reservationEndTime"
                                       value="@Model.EndTime.ToString("HH:mm")" />
                                <div class="flex items-center">
                                    <input type="checkbox" id="useEventEndTime" class="h-4 w-4 text-blue-600 border-gray-300 rounded" checked>
                                    <label for="useEventEndTime" class="ml-2 text-sm text-gray-700">Until End</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- After the Venue section and before the seat selection section -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Select Sub Area</h3>

                <div class="bg-blue-50 p-5 rounded-lg">
                    <div class="mb-4">
                        <label for="subAreaSelect" class="block text-sm font-medium text-gray-700 mb-1">Choose a section</label>
                        <select id="subAreaSelect" class="form-select w-full rounded-md shadow-sm border-gray-300 bg-white text-gray-800">
                            <option value="">Loading sub areas...</option>
                        </select>
                        <p class="text-xs text-gray-500 mt-1">Select the section where you'd like to sit</p>
                    </div>

                    <div id="subAreaDetails" class="hidden bg-white p-4 rounded-md border border-blue-200 mt-4">
                        <!-- SubArea details will be displayed here -->
                    </div>
                </div>
            </div>
            <!-- Seat Selection Section -->
            <div class="mb-8">
                <h3 class="text-xl font-semibold text-gray-800 mb-4">Select Your Seats</h3>

                <!-- Canvas with better framing -->
                <div class="mb-6 flex justify-center">
                    <div class="relative">
                        <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-medium z-10">
                            Stage
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg border-2 border-gray-200">
                            <canvas id="seatCanvas" width="600" height="400" class="rounded-md shadow-inner"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Legend with improved styling -->
                <div class="mb-6 bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-center text-gray-700 font-semibold mb-3">Seat Legend</h3>
                    <div class="flex justify-center flex-wrap gap-6">
                        <div class="flex items-center">
                            <div class="w-5 h-5 bg-green-500 rounded mr-2 shadow-sm"></div>
                            <span class="text-sm text-gray-700">Available</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-5 h-5 bg-red-500 rounded mr-2 shadow-sm"></div>
                            <span class="text-sm text-gray-700">Unavailable</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-5 h-5 bg-blue-500 rounded mr-2 shadow-sm"></div>
                            <span class="text-sm text-gray-700">Selected</span>
                        </div>
                    </div>
                </div>

                <!-- Selected seats summary -->
                <div id="selection-summary" class="mb-6 hidden">
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h3 class="text-blue-800 font-medium mb-2">Your Selection</h3>
                        <div class="flex items-center">
                            <div class="mr-3">
                                <span id="selected-count" class="text-2xl font-bold text-blue-600">0</span>
                                <span class="text-blue-600">seats</span>
                            </div>
                            <div id="selected-seats-list" class="text-sm text-blue-800">
                                <!-- Will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action buttons -->
            <div class="flex flex-col sm:flex-row gap-3 justify-center">
                <button id="clear-selection" class="px-5 py-3 border border-gray-300 text-gray-700 font-medium rounded-md shadow-sm hover:bg-gray-50 transition-duration-150 hidden">
                    Clear Selection
                </button>

                <button id="confirm-reservation" class="px-6 py-3 bg-blue-600 text-white font-medium rounded-md shadow-md hover:bg-blue-700 transition-duration-150 flex items-center justify-center">
                    <span>Complete Reservation</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <!-- Back Button -->
    <div class="mt-8">
        <a href="@Url.Action("Details", "Events", new { id = Model.Id })" class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Event Details
        </a>
    </div>
</div>

@section Scripts {
    <script>
        const eventId = @eventId;
        const venueId = @venueId;
        let selectedSeats = [];
        let seatNames = {};

        // Add this to your existing JavaScript in the Scripts section
        $(document).ready(function() {
            // Load sub areas for the venue
            loadSubAreas();

            // Handle sub area selection change
            $("#subAreaSelect").on("change", function() {
                const subAreaId = $(this).val();
                if (subAreaId) {
                    // Show details about the selected sub area
                    showSubAreaDetails(subAreaId);

                    // Load seats for this sub area
                    loadSeats(subAreaId);
                } else {
                    // Clear seat canvas and hide details
                    clearCanvas();
                    $("#subAreaDetails").addClass("hidden");
                }
            });

            function loadSubAreas() {
                // Get venue ID from the model
                const venueId = @venueId;

                // Show loading state
                $("#subAreaSelect").html('<option value="">Loading sub areas...</option>');

                // Fetch sub areas from the API
                $.getJSON(`/SubAreas/GetSubAreas?venueId=${venueId}`, function(data) {
                    // Clear the dropdown
                    $("#subAreaSelect").empty();

                    // Add default option
                    $("#subAreaSelect").append('<option value="">Select a section</option>');

                    // Add options for each sub area
                    if (data && data.length > 0) {
                        data.forEach(function(subArea) {
                            $("#subAreaSelect").append(`<option value="${subArea.id}">${subArea.areaName}</option>`);
                        });
                    } else {
                        $("#subAreaSelect").html('<option value="">No sections available</option>');
                    }
                }).fail(function() {
                    $("#subAreaSelect").html('<option value="">Error loading sections</option>');
                });
            }

            function showSubAreaDetails(subAreaId) {
                // You can fetch additional details about the sub area if needed
                // For now, we'll just show a simple message
                $("#subAreaDetails").html(`
            <div class="flex items-center">
                <svg class="h-5 w-5 text-blue-500 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="text-sm text-gray-700">Select seats from the seating chart below</span>
            </div>
        `).removeClass("hidden");
            }

            function loadSeats(subAreaId) {
                // Clear existing canvas
                clearCanvas();

                // Show loading indicator
                showLoading();

                // Fetch seats for this sub area and event
                $.getJSON(`/Seat/get_data?SubAreaId=${subAreaId}&eventId=${@eventId}`, function(data) {
                    // Remove loading indicator
                    clearCanvas();

                    if (data && data.length > 0) {
                        // Render seats on the canvas
                        renderSeats(data);
                    } else {
                        // Show message if no seats available
                        showNoSeatsMessage();
                    }
                }).fail(function() {
                    clearCanvas();
                    showErrorMessage();
                });
            }

            // Note: You'll need to implement or modify these functions based on your existing code:
            // - clearCanvas()
            // - showLoading()
            // - renderSeats(data)
            // - showNoSeatsMessage()
            // - showErrorMessage()
        });

        $(document).ready(function () {
            // Initialize Fabric.js canvas
            const canvas = new fabric.Canvas('seatCanvas', {
                selection: false // Disable group selection
            });

            // Loading indicator
            showLoading(canvas);

            // Handle checkbox states for time inputs
            $("#useEventStartTime").on("change", function() {
                if ($(this).is(':checked')) {
                    $("#reservationStartTime").val('@Model.StartDateTime.ToString("HH:mm")');
                    $("#reservationStartTime").prop('disabled', true);
                } else {
                    $("#reservationStartTime").prop('disabled', false);
                }
            });

            $("#useEventEndTime").on("change", function() {
                if ($(this).is(':checked')) {
                    $("#reservationEndTime").val('@Model.EndTime.ToString("HH:mm")');
                    $("#reservationEndTime").prop('disabled', true);
                } else {
                    $("#reservationEndTime").prop('disabled', false);
                }
            });

            // Initial state
            if ($("#useEventStartTime").is(':checked')) {
                $("#reservationStartTime").prop('disabled', true);
            }

            if ($("#useEventEndTime").is(':checked')) {
                $("#reservationEndTime").prop('disabled', true);
            }

            // Fetch seat data
            $.getJSON(`/Seat/get_data?SubAreaId=${venueId}&eventId=${eventId}`, function (data) {
                console.log("Seat data received:", data);
                canvas.clear(); // Clear loading indicator

                if (data && data.length) {
                    renderSeats(canvas, data);
                } else {
                    // Show message if no seats available
                    const noSeatsText = new fabric.Text('No seats available for this venue', {
                        left: 300,
                        top: 200,
                        originX: 'center',
                        originY: 'center',
                        fill: '#666',
                        fontSize: 18
                    });
                    canvas.add(noSeatsText);
                    canvas.renderAll();
                }
            }).fail(function() {
                canvas.clear();
                const errorText = new fabric.Text('Failed to load seat data. Please try again.', {
                    left: 300,
                    top: 200,
                    originX: 'center',
                    originY: 'center',
                    fill: '#e53e3e',
                    fontSize: 18
                });
                canvas.add(errorText);
                canvas.renderAll();
            });

            // Handle confirm button click
            $("#confirm-reservation").on("click", function () {
                if (selectedSeats.length > 0) {
                    const subAreaId = $("#subAreaSelect").val();

                    if (!subAreaId) {
                        showNotification('Please select a section.', 'warning');
                        return;
                    }

                    // Show loading state
                    $(this).prop('disabled', true)
                        .html('<svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Processing...');

                    // Get reservation times
                    const startTime = $("#useEventStartTime").is(":checked")
                        ? $("#startTime").val()
                        : $("#reservationStartTime").val();

                    const endTime = $("#useEventEndTime").is(":checked")
                        ? $("#endTime").val()
                        : $("#reservationEndTime").val();

                    // Calculate duration
                    const timeStart = new Date(`2000-01-01T${startTime}`);
                    const timeEnd = new Date(`2000-01-01T${endTime}`);
                    const difference = timeEnd - timeStart;

                    if (difference <= 0) {
                        showNotification('End time must be after start time.', 'error');
                        $(this).prop('disabled', false)
                            .html('<span>Confirm Reservation</span><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>');
                        return;
                    }

                    // Format duration as HH:MM:SS
                    const hours = Math.floor(difference / 3600000).toString().padStart(2, '0');
                    const minutes = Math.floor((difference % 3600000) / 60000).toString().padStart(2, '0');
                    const seconds = Math.floor((difference % 60000) / 1000).toString().padStart(2, '0');
                    const duration = `${hours}:${minutes}:${seconds}`;

                    // Get reservation date
                    const eventDate = $("#eventDate").val();
                    const reservationDate = `${eventDate}T${startTime}`;

                    // Submit reservation
                    $.ajax({
                        url: `/Reservation/MakeRes`,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({
                            seatIds: selectedSeats,
                            eventId: @eventId,
                            subAreaId: subAreaId,
                            duration: duration,
                            resDate: reservationDate
                        }),
                        success: function(response) {
                            showNotification('Reservation successful!', 'success');
                            setTimeout(() => {
                                window.location.href = "/Reservation/Index";
                            }, 1500);
                        },
                        error: function(xhr) {
                            // Reset button
                            $("#confirm-seats").prop('disabled', false)
                                .html('<span>Confirm Reservation</span><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>');

                            // Display error message
                            let errorMessage = "Failed to reserve seats. Please try again.";
                            if (xhr.responseText) {
                                try {
                                    const response = JSON.parse(xhr.responseText);
                                    if (typeof response === 'string') {
                                        errorMessage = response;
                                    }
                                } catch (e) {
                                    errorMessage = xhr.responseText;
                                }
                            }
                            showNotification(errorMessage, 'error');
                        }
                    });
                } else {
                    showNotification('Please select at least one seat.', 'warning');
                }
            });

            // Clear selection button
            $("#clear-selection").on("click", function() {
                clearAllSelections(canvas);
            });
        });

        function showLoading(canvas) {
            // Create loading indicator
            const loadingText = new fabric.Text('Loading seats...', {
                left: 300,
                top: 200,
                originX: 'center',
                originY: 'center',
                fill: '#4a5568',
                fontSize: 18
            });
            canvas.add(loadingText);
            canvas.renderAll();
        }

        function showNotification(message, type = 'info') {
            // Remove any existing notification
            $('.notification').remove();

            // Create color classes based on type
            let bgColor = 'bg-blue-500';
            if (type === 'success') bgColor = 'bg-green-500';
            if (type === 'error') bgColor = 'bg-red-500';
            if (type === 'warning') bgColor = 'bg-yellow-500';

            // Create and append notification
            const notification = $(`
                <div class="notification fixed top-4 right-4 ${bgColor} text-white px-6 py-4 rounded-lg shadow-lg z-50 transform transition-all duration-500 translate-x-full">
                    <div class="flex items-center">
                        <span>${message}</span>
                        <button class="ml-4 text-white focus:outline-none">
                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            `);

            $('body').append(notification);

            // Animate in
            setTimeout(() => {
                $('.notification').removeClass('translate-x-full');
            }, 10);

            // Dismiss on click
            $('.notification button').on('click', function() {
                dismissNotification();
            });

            // Auto dismiss after 4 seconds for success/info
            if (type !== 'error') {
                setTimeout(dismissNotification, 4000);
            }

            function dismissNotification() {
                $('.notification').addClass('translate-x-full');
                setTimeout(() => {
                    $('.notification').remove();
                }, 500);
            }
        }

        function updateSelectionSummary() {
            const count = selectedSeats.length;

            if (count > 0) {
                // Show the summary and clear button
                $('#selection-summary').removeClass('hidden');
                $('#clear-selection').removeClass('hidden');

                // Update count
                $('#selected-count').text(count);

                // Build the seat names list
                let seatNamesList = Object.keys(seatNames)
                    .filter(id => selectedSeats.includes(parseInt(id)))
                    .map(id => seatNames[id])
                    .join(', ');

                $('#selected-seats-list').text(seatNamesList);
            } else {
                // Hide the summary and clear button
                $('#selection-summary').addClass('hidden');
                $('#clear-selection').addClass('hidden');
            }
        }

        function clearAllSelections(canvas) {
            // Find all seat groups and reset to available
            canvas.getObjects('group').forEach(group => {
                if (group.available) {
                    const rect = group.item(0);
                    rect.set('fill', '#4CAF50'); // Green for available
                }
            });

            // Clear selected seats array
            selectedSeats = [];
            updateSelectionSummary();
            canvas.renderAll();
        }

        function renderSeats(canvas, seats) {
            // Clear canvas first
            canvas.clear();

            // Draw stage indicator at the top
            const stageRect = new fabric.Rect({
                width: 200,
                height: 20,
                fill: '#1a365d',
                originX: 'center',
                originY: 'center',
                rx: 5,
                ry: 5,
                left: 300,
                top: 30
            });

            const stageText = new fabric.Text('STAGE', {
                fontSize: 12,
                fill: '#fff',
                originX: 'center',
                originY: 'center',
                left: 300,
                top: 30
            });

            const stageGroup = new fabric.Group([stageRect, stageText], {
                selectable: false
            });

            canvas.add(stageGroup);

            seats.forEach(seat => {
                // Store seat name for use in selection summary
                seatNames[seat.id] = seat.name;

                // Create the seat rectangle with rounded corners
                const rect = new fabric.Rect({
                    width: 50,
                    height: 50,
                    fill: seat.available ? '#4CAF50' : '#F44336', // Green if available, red if not
                    originX: 'center',
                    originY: 'center',
                    rx: 6,
                    ry: 6,
                    stroke: '#e2e8f0',
                    strokeWidth: 1,
                    shadow: new fabric.Shadow({
                        color: 'rgba(0,0,0,0.1)',
                        offsetX: 0,
                        offsetY: 2,
                        blur: 4
                    })
                });

                // Create seat label text
                const text = new fabric.Text(seat.name, {
                    fontSize: 14,
                    fontWeight: 'bold',
                    fill: '#fff',
                    originX: 'center',
                    originY: 'center'
                });

                // Group rectangle and text
                const seatGroup = new fabric.Group([rect, text], {
                    left: seat.x,
                    top: seat.y,
                    selectable: false,
                    seatId: seat.id,
                    available: seat.available,
                    originX: 'center',
                    originY: 'center',
                    hoverCursor: seat.available ? 'pointer' : 'not-allowed'
                });

                // Add click event only for available seats
                if (seat.available) {
                    seatGroup.on('mousedown', function () {
                        toggleSeatSelection(this, canvas);
                    });
                }

                canvas.add(seatGroup);
            });

            canvas.renderAll();
        }

        function toggleSeatSelection(seatGroup, canvas) {
            const seatId = seatGroup.seatId;
            const rect = seatGroup.item(0); // The first item is the rectangle

            // Check if seat is already selected
            const seatIndex = selectedSeats.indexOf(seatId);

            if (seatIndex === -1) {
                // Select the seat
                selectedSeats.push(seatId);
                rect.set('fill', '#2196F3'); // Blue for selected
                rect.set('shadow', new fabric.Shadow({
                    color: 'rgba(33,150,243,0.4)',
                    offsetX: 0,
                    offsetY: 3,
                    blur: 5
                }));
            } else {
                // Deselect the seat
                selectedSeats.splice(seatIndex, 1);
                rect.set('fill', '#4CAF50'); // Green for available
                rect.set('shadow', new fabric.Shadow({
                    color: 'rgba(0,0,0,0.1)',
                    offsetX: 0,
                    offsetY: 2,
                    blur: 4
                }));
            }

            updateSelectionSummary();
            canvas.renderAll();
        }
    </script>
}