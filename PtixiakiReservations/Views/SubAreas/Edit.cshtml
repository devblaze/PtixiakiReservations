@using System.Linq
@model PtixiakiReservations.Models.SubArea

@{
    ViewData["Title"] = "Edit Sub Area";
}

<div class="bg-gradient-to-r from-blue-50 to-indigo-50 min-h-screen py-8 px-4 sm:px-6 lg:px-8">
    <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-xl shadow-md overflow-hidden mb-8">
            <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-8">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between">
                    <div>
                        <h1 class="text-2xl md:text-3xl font-bold text-white">Edit Sub Area</h1>
                        <p class="mt-2 text-indigo-100 max-w-3xl">
                            Update details and seating arrangement for <span
                                                                           class="font-semibold">@Model.AreaName</span>
                        </p>
                    </div>
                    <div class="mt-4 md:mt-0">
                        <a href="@Url.Action("Index", "SubAreas")"
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-700 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24"
                                 stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                            </svg>
                            Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main content with tabs -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <!-- Tabs -->
            <div class="border-b border-gray-200">
                <nav class="flex -mb-px" aria-label="Tabs">
                    <button id="tab-details"
                            class="tab-button border-indigo-500 text-indigo-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm"
                            aria-current="page">
                        Basic Details
                    </button>
                    <button id="tab-seats"
                            class="tab-button border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ml-8">
                        Seat Map
                    </button>
                </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
                <!-- Basic Details Tab Content -->
                <div id="details-content" class="tab-content">
                    <form asp-action="Edit" id="editSubAreaForm" class="space-y-6 max-w-xl mx-auto">
                        <div asp-validation-summary="ModelOnly" class="text-red-500"></div>
                        <input type="hidden" asp-for="Id"/>
                        <input type="hidden" asp-for="VenueId"/>

                        <!-- Area Name -->
                        <div>
                            <label asp-for="AreaName" class="block text-sm font-medium text-gray-700 mb-1">Area
                                Name</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
                                    </svg>
                                </div>
                                <input asp-for="AreaName"
                                       class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                            </div>
                            <span asp-validation-for="AreaName" class="text-red-500 text-xs mt-1"></span>
                        </div>

                        <!-- Description -->
                        <div>
                            <label asp-for="Desc"
                                   class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M4 6h16M4 12h16M4 18h7"/>
                                    </svg>
                                </div>
                                <input asp-for="Desc"
                                       class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                            </div>
                            <span asp-validation-for="Desc" class="text-red-500 text-xs mt-1"></span>
                        </div>

                        <!-- Dimensions -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label asp-for="Width"
                                       class="block text-sm font-medium text-gray-700 mb-1">Width</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                             fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5"/>
                                        </svg>
                                    </div>
                                    <input asp-for="Width" type="number" min="0"
                                           class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                </div>
                                <span asp-validation-for="Width" class="text-red-500 text-xs mt-1"></span>
                            </div>
                            <div>
                                <label asp-for="Height"
                                       class="block text-sm font-medium text-gray-700 mb-1">Height</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                             fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5"/>
                                        </svg>
                                    </div>
                                    <input asp-for="Height" type="number" min="0"
                                           class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                </div>
                                <span asp-validation-for="Height" class="text-red-500 text-xs mt-1"></span>
                            </div>
                        </div>

                        <!-- Position -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label asp-for="Left" class="block text-sm font-medium text-gray-700 mb-1">Left
                                    Position</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                             fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                                        </svg>
                                    </div>
                                    <input asp-for="Left" type="number"
                                           class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                </div>
                                <span asp-validation-for="Left" class="text-red-500 text-xs mt-1"></span>
                            </div>
                            <div>
                                <label asp-for="Top" class="block text-sm font-medium text-gray-700 mb-1">Top
                                    Position</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                             fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M5 10l7-7m0 0l7 7m-7-7v18"/>
                                        </svg>
                                    </div>
                                    <input asp-for="Top" type="number"
                                           class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                </div>
                                <span asp-validation-for="Top" class="text-red-500 text-xs mt-1"></span>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="flex items-center space-x-3 pt-5 border-t border-gray-200">
                            <button type="submit"
                                    class="px-5 py-2.5 bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-medium rounded-md shadow transition duration-200 hover:from-blue-700 hover:to-indigo-700 focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 cursor-pointer">
                                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-5 w-5 mr-1" fill="none"
                                     viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M5 13l4 4L19 7"/>
                                </svg>
                                Save Changes
                            </button>
                            <a asp-action="Index"
                               class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                                Cancel
                            </a>
                        </div>
                    </form>
                </div>

                <!-- Seat Map Tab Content -->
                <div id="seats-content" class="tab-content hidden">
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <!-- Seat Map Controls -->
                        <div class="bg-gray-50 rounded-lg p-5 border border-gray-200">
                            <div class="flex items-center mb-4">
                                <div
                                    class="h-10 w-10 rounded-md bg-indigo-100 flex items-center justify-center text-indigo-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"/>
                                    </svg>
                                </div>
                                <h2 class="ml-3 text-lg font-medium text-gray-800">Seat Map Controls</h2>
                            </div>

                            <div class="space-y-4">
                                <!-- Rows and Columns -->
                                <div>
                                    <label for="Row" class="block text-sm font-medium text-gray-700 mb-1">Number of
                                        Rows</label>
                                    <div class="relative">
                                        <div
                                            class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                                 fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M19 9l-7 7-7-7"/>
                                            </svg>
                                        </div>
                                        <input type="number" id="Row" value="0" min="0" max="20"
                                               class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                    </div>
                                </div>

                                <div>
                                    <label for="Col" class="block text-sm font-medium text-gray-700 mb-1">Number of
                                        Columns</label>
                                    <div class="relative">
                                        <div
                                            class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400"
                                                 fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M9 5l7 7-7 7"/>
                                            </svg>
                                        </div>
                                        <input type="number" id="Col" value="0" min="0" max="20"
                                               class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"/>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                <div class="pt-4 space-y-3">
                                    <button type="button" id="create"
                                            class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M12 4v16m8-8H4"/>
                                        </svg>
                                        Generate Seats
                                    </button>

                                    <button type="button" id="save"
                                            class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                                        </svg>
                                        Save Seat Map
                                    </button>

                                    <button type="button" id="deleteSeat"
                                            class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                        </svg>
                                        Delete Selected Seats
                                    </button>
                                </div>

                                <!-- Help Text -->
                                <div class="mt-4 bg-blue-50 p-3 rounded-md border border-blue-100">
                                    <h4 class="text-sm font-medium text-blue-800 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                        </svg>
                                        Tips
                                    </h4>
                                    <ul class="text-xs text-blue-700 mt-1 space-y-1 pl-5 list-disc">
                                        <li>Drag seats to position them</li>
                                        <li>Click to select seats for deletion</li>
                                        <li>Use Shift+Click for multiple selection</li>
                                        <li>Remember to save your changes</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Canvas Container -->
                        <div class="lg:col-span-2 flex flex-col items-center">
                            <!-- Canvas Header -->
                            <div class="w-full bg-gray-50 p-3 rounded-t-lg border border-gray-200 text-center">
                                <h3 class="text-sm font-medium text-gray-700">Drag seats to reposition | Select seats to
                                    delete</h3>
                            </div>

                            <!-- Canvas -->
                            <div
                                class="bg-white border border-gray-200 border-t-0 rounded-b-lg p-4 shadow-md w-full flex justify-center">
                                <canvas id="c" width="600" height="500"
                                        class="border border-gray-300 rounded bg-gray-50 shadow-inner"></canvas>
                            </div>

                            <!-- Progress Message -->
                            <div id="seatMapStatus" class="mt-3 text-sm text-gray-600 hidden">
                                <span class="inline-flex items-center">
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-indigo-500"
                                         xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                                stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor"
                                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span id="seatMapStatusText">Loading seat map...</span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM is loaded, initializing seat management");

        // First, make sure the tabs exist and are properly initialized
        const tabDetails = document.getElementById('tab-details');
        const tabSeats = document.getElementById('tab-seats');
        const detailsContent = document.getElementById('details-content');

        // Check if seat content exists or initialize it
        let seatsContent = document.getElementById('seats-content');
        if (!seatsContent) {
            console.log("Creating seats content from scratch");
            seatsContent = document.createElement('div');
            seatsContent.id = 'seats-content';
            seatsContent.className = 'tab-content';
            seatsContent.style.display = 'none';

            // If there's a parent for the details content, add the seats content there
            if (detailsContent && detailsContent.parentNode) {
                detailsContent.parentNode.appendChild(seatsContent);
            } else {
                // Fallback to adding after details content
                const contentContainer = document.querySelector('.p-6');
                if (contentContainer) {
                    contentContainer.appendChild(seatsContent);
                }
            }
        }

        // Verify the required elements exist before proceeding
        if (!tabDetails || !tabSeats || !detailsContent || !seatsContent) {
            console.error("Critical UI elements not found, cannot initialize seat management");
            return;
        }

        console.log("Tab elements found, continuing initialization");

        // Tab switching event listeners
        tabDetails.addEventListener('click', function() {
            console.log("Switching to details tab");
            tabDetails.classList.add('border-indigo-500', 'text-indigo-600');
            tabDetails.classList.remove('border-transparent', 'text-gray-500');
            tabSeats.classList.remove('border-indigo-500', 'text-indigo-600');
            tabSeats.classList.add('border-transparent', 'text-gray-500');

            detailsContent.style.display = 'block';
            seatsContent.style.display = 'none';
        });

        tabSeats.addEventListener('click', function() {
            console.log("Switching to seats tab");
            tabSeats.classList.add('border-indigo-500', 'text-indigo-600');
            tabSeats.classList.remove('border-transparent', 'text-gray-500');
            tabDetails.classList.remove('border-indigo-500', 'text-indigo-600');
            tabDetails.classList.add('border-transparent', 'text-gray-500');

            detailsContent.style.display = 'none';
            seatsContent.style.display = 'block';

            // Initialize seats if needed
            if (!window.seatsInitialized) {
                initializeSeats();
            }
        });

        // Variables to track state
        let currentSeats = [];
        let selectedSeats = new Set();
        window.seatsInitialized = false;

        // Initialize the seats UI and functionality
        function initializeSeats() {
            console.log("Initializing seats interface");

            // Create the UI elements for seat management
            seatsContent.innerHTML = `
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <!-- Seat Map Controls -->
                    <div class="bg-gray-50 rounded-lg p-5 border border-gray-200">
                        <div class="flex items-center mb-4">
                            <div class="h-10 w-10 rounded-md bg-indigo-100 flex items-center justify-center text-indigo-600">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"/>
                                </svg>
                            </div>
                            <h2 class="ml-3 text-lg font-medium text-gray-800">Seat Map Controls</h2>
                        </div>
                        
                        <div class="space-y-4">
                            <!-- Action Buttons -->
                            <div class="pt-4 space-y-3">
                                <button type="button" id="add-seat" class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                                    </svg>
                                    Add New Seat
                                </button>
                                
                                <button type="button" id="save-seats" class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
                                    </svg>
                                    Save Seat Map
                                </button>
                                
                                <button type="button" id="remove-seats" class="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                    </svg>
                                    Delete Selected Seats
                                </button>
                            </div>
                            
                            <!-- Help Text -->
                            <div class="mt-4 bg-blue-50 p-3 rounded-md border border-blue-100">
                                <h4 class="text-sm font-medium text-blue-800 flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                    Tips
                                </h4>
                                <ul class="text-xs text-blue-700 mt-1 space-y-1 pl-5 list-disc">
                                    <li>Drag seats to position them</li>
                                    <li>Click to select seats for deletion</li>
                                    <li>Remember to save your changes</li>
                                </ul>
                            </div>
                            
                            <!-- Status Message -->
                            <div id="seat-status" class="mt-4 p-3 bg-gray-100 rounded-md text-gray-700">
                                Ready to manage seats. Add or modify seats and save when done.
                            </div>
                        </div>
                    </div>
                    
                    <!-- Canvas Container -->
                    <div class="lg:col-span-2">
                        <div class="bg-white rounded-lg border border-gray-200 p-4">
                            <div class="bg-gray-100 border border-gray-300 rounded-lg p-4 relative" style="min-height: 400px">
                                <div id="seat-map" class="relative w-full h-96 overflow-auto">
                                    <!-- Seats will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Now that elements are created, we can add event listeners
            const subAreaId = document.querySelector('input[name="Id"]').value;
            console.log("Found subAreaId:", subAreaId);

            const addSeatBtn = document.getElementById('add-seat');
            const saveSeatBtn = document.getElementById('save-seats');
            const removeSeatBtn = document.getElementById('remove-seats');
            const seatMap = document.getElementById('seat-map');
            const statusBar = document.getElementById('seat-status');

            if (!addSeatBtn || !saveSeatBtn || !removeSeatBtn || !seatMap || !statusBar) {
                console.error("Could not find required elements for seat management");
                return;
            }

            console.log("Seat management elements found, setting up event handlers");

            // Load seats from server
            loadSeats(subAreaId);

            // Event handlers for buttons
            addSeatBtn.addEventListener('click', function() {
                console.log("Adding new seat");
                const seatNumber = currentSeats.length + 1;
                const newSeat = {
                    id: `temp-${Date.now()}`, // Temporary ID until saved
                    name: `Seat ${seatNumber}`,
                    x: 50,
                    y: 50,
                    available: true
                };

                currentSeats.push(newSeat);
                renderSeats();
                updateStatus(`Added new seat: ${newSeat.name}. Drag to position it.`);
            });

            removeSeatBtn.addEventListener('click', function() {
                console.log("Removing selected seats");
                if (selectedSeats.size === 0) {
                    updateStatus("No seats selected. Click on seats to select them for removal.", "warning");
                    return;
                }

                if (confirm(`Are you sure you want to remove ${selectedSeats.size} selected seat(s)?`)) {
                    // Remove from UI immediately
                    currentSeats = currentSeats.filter(seat => !selectedSeats.has(seat.name));

                    // If there are existing seats with IDs, send deletion request to server
                    const seatsToDelete = Array.from(selectedSeats);

                    fetch('/Seat/DeleteMultipleSeats', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({
                            seatNames: seatsToDelete,
                            subAreaId: subAreaId
                        })
                    })
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                selectedSeats.clear();
                                updateStatus(`Removed ${seatsToDelete.length} seats successfully.`, "success");
                            } else {
                                updateStatus("Error deleting seats: " + (result.message || "Unknown error"), "error");
                            }
                            renderSeats();
                        })
                        .catch(error => {
                            console.error('Error deleting seats:', error);
                            updateStatus("Error communicating with server. Seats removed from view only.", "error");
                            renderSeats();
                        });
                }
            });

            saveSeatBtn.addEventListener('click', function() {
                console.log("Saving seat map");
                if (currentSeats.length === 0) {
                    updateStatus("No seats to save. Add seats first.", "warning");
                    return;
                }

                updateStatus("Saving seats...");

                // Convert seats to the format expected by the backend
                const seatsToSave = currentSeats.map(seat => ({
                    Name: seat.name,
                    left: seat.x,
                    top: seat.y
                }));

                fetch(`/Seat/CreateTableMap?subAreaId=${subAreaId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(seatsToSave)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned status ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        updateStatus(`${seatsToSave.length} seats saved successfully!`, "success");
                        // Reload seats to get proper IDs
                        loadSeats(subAreaId);
                    })
                    .catch(error => {
                        console.error('Error saving seats:', error);
                        updateStatus("Error saving seats: " + error.message, "error");
                    });
            });

            // Mark as initialized
            window.seatsInitialized = true;
        }

        // Load seats from server
        function loadSeats(subAreaId) {
            console.log("Loading seats for subArea:", subAreaId);
            updateStatus("Loading seat map...");

            fetch(`/Seat/get_data?SubAreaId=${subAreaId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned status ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Loaded seats:", data);
                    currentSeats = Array.isArray(data) ? data : [];
                    selectedSeats.clear();
                    renderSeats();

                    if (currentSeats.length > 0) {
                        updateStatus(`Loaded ${currentSeats.length} seats. Click to select, drag to reposition.`, "success");
                    } else {
                        updateStatus("No existing seats found. Add seats using the 'Add New Seat' button.", "info");
                    }
                })
                .catch(error => {
                    console.error('Error loading seats:', error);
                    updateStatus("Error loading seats: " + error.message, "error");
                });
        }

        // Render seats on the map
        function renderSeats() {
            console.log("Rendering seats:", currentSeats.length);
            const seatMap = document.getElementById('seat-map');
            if (!seatMap) {
                console.error("Seat map element not found");
                return;
            }

            // Clear the seat map
            seatMap.innerHTML = '';

            // Add each seat
            currentSeats.forEach(seat => {
                const seatElement = document.createElement('div');
                seatElement.className = 'absolute text-white rounded-md flex items-center justify-center cursor-move shadow-md';
                seatElement.classList.add(selectedSeats.has(seat.name) ? 'bg-red-500' : 'bg-blue-500');
                seatElement.classList.add(selectedSeats.has(seat.name) ? 'hover:bg-red-600' : 'hover:bg-blue-600');

                seatElement.style.width = '60px';
                seatElement.style.height = '60px';
                seatElement.style.left = `${seat.x}px`;
                seatElement.style.top = `${seat.y}px`;
                seatElement.textContent = seat.name;
                seatElement.dataset.id = seat.id;
                seatElement.dataset.name = seat.name;

                // Handle seat selection
                seatElement.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    if (selectedSeats.has(seat.name)) {
                        selectedSeats.delete(seat.name);
                        this.classList.remove('bg-red-500', 'hover:bg-red-600');
                        this.classList.add('bg-blue-500', 'hover:bg-blue-600');
                        updateStatus(`Deselected: ${seat.name}`);
                    } else {
                        selectedSeats.add(seat.name);
                        this.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                        this.classList.add('bg-red-500', 'hover:bg-red-600');
                        updateStatus(`Selected: ${seat.name}`);
                    }
                });

                // Make seat draggable using mouse events for better control
                let isDragging = false;
                let dragStartX, dragStartY;
                let originalX, originalY;

                seatElement.addEventListener('mousedown', function(e) {
                    e.preventDefault();

                    // Prepare for potential drag
                    isDragging = false;
                    dragStartX = e.clientX;
                    dragStartY = e.clientY;
                    originalX = seat.x;
                    originalY = seat.y;

                    const onMouseMove = function(e) {
                        e.preventDefault();

                        // Detect if we've moved enough to consider it a drag
                        const dx = Math.abs(e.clientX - dragStartX);
                        const dy = Math.abs(e.clientY - dragStartY);

                        if (!isDragging && (dx > 5 || dy > 5)) {
                            isDragging = true;
                            seatElement.classList.add('opacity-70'); // Visual feedback
                        }

                        if (isDragging) {
                            // Calculate movement
                            const deltaX = e.clientX - dragStartX;
                            const deltaY = e.clientY - dragStartY;

                            // Update position
                            seat.x = originalX + deltaX;
                            seat.y = originalY + deltaY;

                            // Update visual position
                            seatElement.style.left = `${seat.x}px`;
                            seatElement.style.top = `${seat.y}px`;

                            updateStatus(`Moving: ${seat.name}`);
                        }
                    };

                    const onMouseUp = function() {
                        document.removeEventListener('mousemove', onMouseMove);
                        document.removeEventListener('mouseup', onMouseUp);

                        seatElement.classList.remove('opacity-70');

                        if (isDragging) {
                            // Snap to grid (optional)
                            seat.x = Math.round(seat.x / 10) * 10;
                            seat.y = Math.round(seat.y / 10) * 10;

                            // Update final position
                            seatElement.style.left = `${seat.x}px`;
                            seatElement.style.top = `${seat.y}px`;

                            updateStatus(`Repositioned: ${seat.name}`);
                        }
                    };

                    document.addEventListener('mousemove', onMouseMove);
                    document.addEventListener('mouseup', onMouseUp);
                });

                seatMap.appendChild(seatElement);
            });
        }

        // Update status message
        function updateStatus(message, type = "info") {
            console.log(`Status update (${type}): ${message}`);
            const statusBar = document.getElementById('seat-status');
            if (!statusBar) return;

            statusBar.textContent = message;

            // Reset classes
            statusBar.className = 'mt-4 p-3 rounded-md';

            // Apply appropriate styling
            switch (type) {
                case "success":
                    statusBar.classList.add('bg-green-100', 'text-green-800');
                    break;
                case "error":
                    statusBar.classList.add('bg-red-100', 'text-red-800');
                    break;
                case "warning":
                    statusBar.classList.add('bg-yellow-100', 'text-yellow-800');
                    break;
                case "info":
                default:
                    statusBar.classList.add('bg-gray-100', 'text-gray-700');
                    break;
            }
        }

        // Fix the back button to work correctly
        const backButton = document.querySelector('a[href="@Url.Action("Index")"]');
        if (backButton) {
            backButton.addEventListener('click', function(e) {
                e.preventDefault();
                // Directly navigate to the Index action on SubAreas controller
                window.location.href = '@Url.Action("Index", "SubAreas")';
            });
        }

        // Check URL hash for initial tab
        if (window.location.hash === '#seats') {
            document.getElementById('tab-seats').click();
        }

        console.log("Seat management initialization complete");
    });
</script>
}