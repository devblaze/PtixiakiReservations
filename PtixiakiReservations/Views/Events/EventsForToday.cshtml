@model IEnumerable<PtixiakiReservations.Models.Event>

@{
    ViewData["Title"] = "Events";
}

<div class="container mx-auto px-4 py-8 max-w-7xl">
    <!-- Search Panel -->
    <div class="bg-white rounded-xl shadow-lg mb-10 overflow-hidden">
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 px-6 py-4">
            <h3 class="text-xl font-bold text-white">Find Events</h3>
        </div>

        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <!-- Event Type Dropdown -->
                <div>
                    <label for="event-type" class="block text-sm font-medium text-gray-700 mb-2">Event Type</label>
                    <div class="relative">
                        <select id="event-type" class="w-full appearance-none bg-white border border-gray-300 rounded-lg py-3 px-4 pr-8 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                            <option value="">All Event Types</option>
                            <!-- Will be populated via AJAX -->
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Date Range Picker -->
                <div class="md:col-span-2">
                    <label for="date-range" class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                    <div class="relative">
                        <input type="text" id="date-range" placeholder="Select date range"
                               class="w-full bg-white border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                        <button id="reset-date" type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Search Term -->
            <div class="mb-6">
                <label for="search-term" class="block text-sm font-medium text-gray-700 mb-2">Event Name or Location</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <input type="text" id="search-term" placeholder="Enter event name, venue, or city"
                           class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                </div>
            </div>

            <div class="flex justify-between items-center">
                <p id="search-validation-message" class="text-red-500 text-sm hidden">Please fill at least 2 fields to search</p>
                <button id="search-button" disabled
                        class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                    <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                        Search Events
                    </span>
                </button>
            </div>
        </div>
    </div>

    <!-- Events Count Display -->
    <div id="events-count" class="flex items-center justify-between mb-8">
        <h2 class="text-xl font-semibold text-gray-800">
            Events <span class="text-blue-600 font-bold">(<span id="filtered-count">0</span>)</span>
        </h2>
        <div class="text-sm text-gray-500">
            Showing results based on your search criteria
        </div>
    </div>

    <!-- Events Grid -->
    <div id="events-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Event cards will be loaded here dynamically -->
    </div>

    <!-- Loading Indicator -->
    <div id="loading-indicator" class="text-center py-16">
        <div class="inline-block h-12 w-12 rounded-full border-4 border-gray-200 border-t-blue-600 animate-spin"></div>
        <p class="mt-4 text-lg font-medium text-gray-600">Loading events...</p>
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-16">
        <div class="max-w-md mx-auto">
            <svg class="mx-auto h-16 w-16 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 class="mt-4 text-xl font-medium text-gray-700">No events found</h3>
            <p class="mt-2 text-gray-500">Try adjusting your search criteria or check back later for new events</p>
            <button id="reset-search" class="mt-6 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                Reset Search
            </button>
        </div>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="mt-12 flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 hidden">
        <button id="prev-page" class="flex items-center px-5 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Previous
        </button>

        <div id="page-numbers" class="flex flex-wrap justify-center gap-2">
            <!-- Page numbers will be added here -->
        </div>

        <button id="next-page" class="flex items-center px-5 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
            Next
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </button>
    </div>
</div>

<style>
    /* Event card styles with transitions and hover effects */
    .event-card {
        transition: all 0.3s ease;
        border-left: 4px solid #e2e8f0;
    }

    /* Today events - green accent */
    .event-today {
        background-color: #f0fff4;
        border-left-color: #10b981;
    }
    .event-today:hover {
        box-shadow: 0 10px 15px -3px rgba(16, 185, 129, 0.1), 0 4px 6px -2px rgba(16, 185, 129, 0.05);
    }

    /* Upcoming events - blue accent */
    .event-upcoming {
        background-color: #eff6ff;
        border-left-color: #3b82f6;
    }
    .event-upcoming:hover {
        box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.1), 0 4px 6px -2px rgba(59, 130, 246, 0.05);
    }

    /* Past events - gray accent */
    .event-past {
        background-color: #f8fafc;
        border-left-color: #94a3b8;
        opacity: 0.85;
    }
    .event-past:hover {
        box-shadow: 0 10px 15px -3px rgba(148, 163, 184, 0.1), 0 4px 6px -2px rgba(148, 163, 184, 0.05);
    }

    /* Pagination active page */
    .page-active {
        background-color: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            let currentPage = 1;
            let totalPages = 1;
            let pageSize = 12;
            let searchParams = {};
            let dateRangePicker;

            // Initialize Flatpickr date range picker with improved styling
            dateRangePicker = flatpickr("#date-range", {
                mode: "range",
                dateFormat: "Y-m-d",
                altInput: true,
                altFormat: "F j, Y",
                conjunction: " to ",
                minDate: "today",
                defaultDate: [new Date(), new Date(new Date().setDate(new Date().getDate() + 1))],
                onChange: function(selectedDates) {
                    validateSearch();
                }
            });

            // Reset date button
            $('#reset-date').click(function() {
                dateRangePicker.clear();
                validateSearch();
            });

            // Reset search button
            $('#reset-search').click(function() {
                $('#event-type').val('');
                dateRangePicker.clear();
                $('#search-term').val('');
                validateSearch();
                performSearch();
            });

            // Load event types for the dropdown
            loadEventTypes();

            // Initialize with search for today/tomorrow events
            validateSearch();
            if ($('#search-button').prop('disabled') === false) {
                performSearch();
            }

            // Event types loader
            function loadEventTypes() {
                $.getJSON('/Events/GetEventTypes')
                    .done(function(data) {
                        const dropdown = $('#event-type');
                        $.each(data, function(i, item) {
                            dropdown.append($('<option>', {
                                value: item.id,
                                text: item.name
                            }));
                        });
                    })
                    .fail(function(error) {
                        console.error('Failed to load event types:', error);
                    });
            }

            // Validate search fields and enable/disable search button
            function validateSearch() {
                const eventType = $('#event-type').val();
                const dateRange = $('#date-range').val();
                const searchTerm = $('#search-term').val();

                // Count filled fields
                let filledFields = 0;
                if (eventType) filledFields++;
                if (dateRange) filledFields++;
                if (searchTerm) filledFields++;

                // Enable button only if at least 2 fields are filled
                const isValid = filledFields >= 2;
                $('#search-button').prop('disabled', !isValid);

                // Show/hide validation message
                $('#search-validation-message').toggleClass('hidden', isValid);

                return isValid;
            }

            // Monitor all search inputs for validation
            $('#event-type, #date-range, #search-term').on('change input', validateSearch);

            // Search button click handler
            $('#search-button').click(function() {
                if (!validateSearch()) return;
                currentPage = 1;
                performSearch();
            });

            // Pagination handlers
            $('#prev-page').click(function() {
                if (currentPage > 1) {
                    currentPage--;
                    performSearch();
                }
            });

            $('#next-page').click(function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    performSearch();
                }
            });

            // Event delegation for pagination numbers
            $('#page-numbers').on('click', '.page-button', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                performSearch();
            });

            function performSearch() {
                // Show loading state
                $('#events-container').addClass('hidden');
                $('#loading-indicator').removeClass('hidden');
                $('#no-results').addClass('hidden');
                $('#pagination').addClass('hidden');

                // Get selected dates from flatpickr
                let startDate = null;
                let endDate = null;

                if (dateRangePicker.selectedDates.length > 0) {
                    startDate = dateRangePicker.selectedDates[0].toISOString().split('T')[0];
                    endDate = dateRangePicker.selectedDates.length > 1
                        ? dateRangePicker.selectedDates[1].toISOString().split('T')[0]
                        : startDate;
                }

                // Prepare search parameters
                searchParams = {
                    eventTypeId: $('#event-type').val(),
                    startDate: startDate,
                    endDate: endDate,
                    searchTerm: $('#search-term').val(),
                    page: currentPage,
                    pageSize: pageSize
                };

                // Log search parameters for debugging
                console.log('Search parameters:', searchParams);

                // Make search request
                $.getJSON('/Events/SearchEvents', searchParams)
                    .done(function(data) {
                        // Update page data
                        totalPages = data.totalPages;
                        currentPage = data.currentPage;

                        // Clear existing content
                        $('#events-container').empty();

                        // Hide loading indicator
                        $('#loading-indicator').addClass('hidden');

                        // Update the events count
                        $('#filtered-count').text(data.totalCount || 0);

                        // Show no results message if needed
                        if (!data.events || data.events.length === 0) {
                            $('#no-results').removeClass('hidden');
                            return;
                        }

                        // Build event cards
                        data.events.forEach(function(event) {
                            const eventTimeClass = getEventTimeClass(new Date(event.startDateTime));
                            const card = buildEventCard(event, eventTimeClass);
                            $('#events-container').append(card);
                        });

                        // Show events container
                        $('#events-container').removeClass('hidden');

                        // Update pagination
                        updatePagination();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Error performing search:', errorThrown);
                        $('#loading-indicator').addClass('hidden');
                        $('#no-results').removeClass('hidden').find('h3').text('Error searching events');

                        if (jqXHR.status === 400) {
                            $('#search-validation-message').removeClass('hidden').text(jqXHR.responseText);
                        }
                    });
            }

            // Helper function to build event card HTML
            function buildEventCard(event, timeClass) {
                // Format dates
                const startDate = new Date(event.startDateTime);
                const endDate = new Date(event.endTime);
                const formattedStartDate = startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                const formattedStartTime = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                const formattedEndTime = endDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });

                // Determine badge style based on event time
                let badgeClass = '';
                let badgeText = '';

                if (timeClass === 'event-today') {
                    badgeClass = 'bg-emerald-500';
                    badgeText = 'Today';
                } else if (timeClass === 'event-upcoming') {
                    badgeClass = 'bg-blue-500';
                    badgeText = 'Upcoming';
                } else {
                    badgeClass = 'bg-gray-500';
                    badgeText = 'Past';
                }

                // Create the reservation button or message based on event timing
                let reservationElement = '';
                if (timeClass === 'event-past') {
                    reservationElement = `<span class="text-sm text-gray-500 italic flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            Reservations closed
                                          </span>`;
                } else {
                    reservationElement = `<a href="/Reservation/SelectSeats?EventId=${event.id}&VenueId=${event.venueId}" 
                                       class="flex items-center justify-center px-4 py-2 bg-blue-600 text-white font-medium rounded-lg shadow hover:bg-blue-700 transform hover:-translate-y-1 transition-all duration-200">
                                       <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                                       </svg>
                                       Reserve Now
                                    </a>`;
                }

                // Build and return the card HTML
                return `<div class="event-card ${timeClass} rounded-lg overflow-hidden shadow-md transition-all duration-300 hover:-translate-y-2">
                            <div class="p-5">
                                <div class="flex justify-between items-start mb-4">
                                    <span class="${badgeClass} text-white text-xs font-bold px-3 py-1 rounded-full">${badgeText}</span>
                                    <div class="text-xs text-gray-500 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        ${formattedStartDate}
                                    </div>
                                </div>
                                
                                <h3 class="text-xl font-bold text-gray-800 mb-2 line-clamp-2">${event.name}</h3>
                                
                                <div class="text-sm text-gray-600 mb-3 flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    ${formattedStartTime} – ${formattedEndTime}
                                </div>
                                
                                <div class="bg-gray-50 p-3 rounded-lg mb-4">
                                    <div class="flex items-start">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-500 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        <div class="flex-1">
                                            <h4 class="font-semibold text-gray-700">${event.venue.name}</h4>
                                            <p class="text-sm text-gray-600">${event.venue.address}, ${event.venue.city.name}</p>
                                            <p class="text-sm text-gray-500">${event.venue.postalCode} • ${event.venue.phone}</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="flex justify-between items-center">
                                    <a href="/Venue/Details/${event.venueId}" class="text-blue-600 hover:text-blue-800 hover:underline text-sm font-medium flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        Venue Details
                                    </a>
                                    ${reservationElement}
                                </div>
                            </div>
                        </div>`;
            }

            // Update pagination controls
            function updatePagination() {
                if (totalPages <= 1) {
                    $('#pagination').addClass('hidden');
                    return;
                }

                // Update buttons state
                $('#prev-page').prop('disabled', currentPage === 1);
                $('#next-page').prop('disabled', currentPage === totalPages);

                // Build page numbers
                const $pageNumbers = $('#page-numbers');
                $pageNumbers.empty();

                // Determine which page numbers to show
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);

                // Adjust if we're near the end
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }

                // Add first page button if not included
                if (startPage > 1) {
                    $pageNumbers.append(`<button class="page-button w-10 h-10 flex items-center justify-center rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors" data-page="1">1</button>`);
                    if (startPage > 2) {
                        $pageNumbers.append(`<span class="w-10 h-10 flex items-center justify-center text-gray-500">...</span>`);
                    }
                }

                // Add page numbers
                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPage ? 'page-active' : '';
                    $pageNumbers.append(`<button class="page-button w-10 h-10 flex items-center justify-center rounded-lg border border-gray-300 ${activeClass} hover:bg-gray-50 transition-colors" data-page="${i}">${i}</button>`);
                }

                // Add last page button if not included
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        $pageNumbers.append(`<span class="w-10 h-10 flex items-center justify-center text-gray-500">...</span>`);
                    }
                    $pageNumbers.append(`<button class="page-button w-10 h-10 flex items-center justify-center rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors" data-page="${totalPages}">${totalPages}</button>`);
                }

                // Show pagination
                $('#pagination').removeClass('hidden');
            }

            // Helper function to determine time class based on event date
            function getEventTimeClass(eventDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const eventDateOnly = new Date(eventDate);
                eventDateOnly.setHours(0, 0, 0, 0);

                if (eventDateOnly.getTime() === today.getTime()) {
                    return "event-today";
                } else if (eventDateOnly > today) {
                    return "event-upcoming";
                } else {
                    return "event-past";
                }
            }
        });
    </script>
}