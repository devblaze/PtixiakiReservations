@model IEnumerable<PtixiakiReservations.Models.Event>

@{
    ViewData["Title"] = "Events";
}

<div class="container mx-auto px-4 py-8 max-w-7xl">
    <!-- Search Panel -->
    <div class="bg-white rounded-xl shadow-lg mb-10 overflow-hidden">
        <div class="bg-gradient-to-r from-blue-600 to-indigo-700 px-6 py-4">
            <h3 class="text-xl font-bold text-white">Find Events</h3>
        </div>

        <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <!-- Event Type Dropdown -->
                <div>
                    <label for="event-type" class="block text-sm font-medium text-gray-700 mb-2">Event Type</label>
                    <div class="relative">
                        <select id="event-type" class="w-full appearance-none bg-white border border-gray-300 rounded-lg py-3 px-4 pr-8 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                            <option value="">All Event Types</option>
                            <!-- Will be populated via AJAX -->
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- Date Range Picker -->
                <div class="md:col-span-2">
                    <label for="date-range" class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                    <div class="relative">
                        <input type="text" id="date-range" placeholder="Select date range"
                               class="w-full bg-white border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors">
                        <button id="reset-date" type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Search Term with Autocomplete -->
            <div class="mb-6">
                <label for="search-term" class="block text-sm font-medium text-gray-700 mb-2">Event Name or Location</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <input type="text" id="search-term" placeholder="Enter event name, venue, or city"
                           class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                           autocomplete="off">
                </div>
            </div>

            <div class="flex justify-between items-center">
                <p id="search-validation-message" class="text-red-500 text-sm hidden">Please fill at least one field to search</p>
                <button id="search-button"
                        class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                    <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                        Search Events
                    </span>
                </button>
            </div>
        </div>
    </div>

    <!-- Autocomplete Dropdown Container (Positioned relative to viewport) -->
    <div id="autocomplete-dropdown" class="fixed z-50 bg-white shadow-xl rounded-md border border-gray-200 hidden max-h-60 overflow-y-auto w-96"></div>

    <!-- Events Count Display -->
    <div id="events-count" class="flex items-center justify-between mb-8">
        <h2 class="text-xl font-semibold text-gray-800">
            Events <span class="text-blue-600 font-bold">(<span id="filtered-count">0</span>)</span>
        </h2>
        <div class="text-sm text-gray-500">
            Showing results for today and upcoming
        </div>
    </div>

    <!-- Events Grid -->
    <div id="events-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
        @foreach (var item in Model)
        {
            var eventTimeClass = ViewBag.GetEventTimeClass != null ? ViewBag.GetEventTimeClass(item.StartDateTime) : "event-upcoming";

            <div class="event-card @eventTimeClass rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                <div class="p-5">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@item.Name</h3>
                    <div class="flex items-start mb-3">
                        <svg class="h-5 w-5 text-gray-500 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <div>
                            <p class="text-sm text-gray-600">
                                @item.StartDateTime.ToString("dddd, MMMM d, yyyy")
                            </p>
                            <p class="text-sm text-gray-500">
                                @item.StartDateTime.ToString("h:mm tt") - @item.EndTime.ToString("h:mm tt")
                            </p>
                        </div>
                    </div>
                    @if (item.Venue != null)
                    {
                        <div class="flex items-start mb-4">
                            <svg class="h-5 w-5 text-gray-500 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-600">@item.Venue.Name</p>
                                @if (item.Venue.City != null)
                                {
                                    <p class="text-sm text-gray-500">@item.Venue.City.Name</p>
                                }
                            </div>
                        </div>
                    }
                    <div class="flex justify-end">
                        <a href="@Url.Action("Details", "Events", new { id = item.Id })" class="text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors">
                            View Details →
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Loading Indicator - Hidden by default -->
    <div id="loading-indicator" class="text-center py-16 hidden">
        <div class="inline-block h-12 w-12 rounded-full border-4 border-gray-200 border-t-blue-600 animate-spin"></div>
        <p class="mt-4 text-lg font-medium text-gray-600">Loading events...</p>
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="@(Model.Any() ? "hidden" : "") text-center py-16">
        <div class="max-w-md mx-auto">
            <svg class="mx-auto h-16 w-16 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 class="mt-4 text-xl font-medium text-gray-700">No events found</h3>
            <p class="mt-2 text-gray-500">Try adjusting your search criteria or check back later for new events</p>
            <button id="reset-search" class="mt-6 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                Reset Search
            </button>
        </div>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="mt-12 flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 @(Model.Count() > 12 ? "" : "hidden")">
        <button id="prev-page" class="flex items-center px-5 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Previous
        </button>

        <div id="page-numbers" class="flex flex-wrap justify-center gap-2">
            <!-- Page numbers will be added here -->
        </div>

        <button id="next-page" class="flex items-center px-5 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
            Next
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </button>
    </div>
</div>

<style>
    /* Event card styles with transitions and hover effects */
    .event-card {
        transition: all 0.3s ease;
        border-left: 4px solid #e2e8f0;
    }

    /* Today events - green accent */
    .event-today {
        background-color: #f0fff4;
        border-left-color: #10b981;
    }
    .event-today:hover {
        box-shadow: 0 10px 15px -3px rgba(16, 185, 129, 0.1), 0 4px 6px -2px rgba(16, 185, 129, 0.05);
    }

    /* Upcoming events - blue accent */
    .event-upcoming {
        background-color: #eff6ff;
        border-left-color: #3b82f6;
    }
    .event-upcoming:hover {
        box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.1), 0 4px 6px -2px rgba(59, 130, 246, 0.05);
    }

    /* Past events - gray accent */
    .event-past {
        background-color: #f8fafc;
        border-left-color: #94a3b8;
        opacity: 0.85;
    }
    .event-past:hover {
        box-shadow: 0 10px 15px -3px rgba(148, 163, 184, 0.1), 0 4px 6px -2px rgba(148, 163, 184, 0.05);
    }

    /* Pagination active page */
    .page-active {
        background-color: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }

    /* Autocomplete dropdown styling */
    #autocomplete-dropdown {
        box-shadow: 0 4px 10px -2px rgba(0, 0, 0, 0.2);
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
    }

    .autocomplete-item {
        padding: 0.75rem 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .autocomplete-item:hover, .autocomplete-item.active {
        background-color: #f3f4f6;
    }

    .highlight {
        font-weight: 600;
        color: #3b82f6;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            let currentPage = 1;
            let totalPages = 1;
            let pageSize = 12;
            let searchParams = {};
            let dateRangePicker;
            let autocompleteTimeout;
            let autocompleteResults = [];
            let currentAutocompleteIndex = -1;
            // Store the max number of autocomplete results to show
            let maxAutocompleteResults = 8;

            // Initialize Flatpickr date range picker with improved styling
            dateRangePicker = flatpickr("#date-range", {
                mode: "range",
                dateFormat: "Y-m-d",
                altInput: true,
                altFormat: "F j, Y",
                conjunction: " to ",
                minDate: "today",
                defaultDate: [new Date(), new Date(new Date().setDate(new Date().getDate() + 7))],
                onChange: function(selectedDates) {
                    validateSearch();
                }
            });

            // Update filtered count based on initial model
            $('#filtered-count').text(@Model.Count());

            // Reset date button
            $('#reset-date').click(function() {
                dateRangePicker.clear();
                validateSearch();
            });

            // Reset search button
            $('#reset-search').click(function() {
                $('#event-type').val('');
                dateRangePicker.clear();
                $('#search-term').val('');
                validateSearch();
                window.location.href = '@Url.Action("EventsForToday", "Events")';
            });

            // Load event types for the dropdown
            loadEventTypes();

            // Handle search term input for autocomplete
            $('#search-term').on('input', function() {
                const query = $(this).val().trim();

                // Clear previous timeout
                if (autocompleteTimeout) {
                    clearTimeout(autocompleteTimeout);
                }

                // Hide dropdown if query is empty
                if (query.length < 2) {
                    $('#autocomplete-dropdown').addClass('hidden').empty();
                    return;
                }

                // Set timeout for autocomplete to prevent too many requests
                autocompleteTimeout = setTimeout(function() {
                    fetchAutocompleteResults(query);
                }, 300);

                validateSearch();
            });

            // Handle keyboard navigation in autocomplete dropdown
            $('#search-term').on('keydown', function(e) {
                const dropdown = $('#autocomplete-dropdown');
                const isVisible = !dropdown.hasClass('hidden');

                if (!isVisible) return;

                // Down arrow
                if (e.keyCode === 40) {
                    e.preventDefault();
                    navigateAutocomplete(1);
                }
                // Up arrow
                else if (e.keyCode === 38) {
                    e.preventDefault();
                    navigateAutocomplete(-1);
                }
                // Enter
                else if (e.keyCode === 13 && currentAutocompleteIndex >= 0) {
                    e.preventDefault();
                    selectAutocompleteItem(currentAutocompleteIndex);
                }
                // Escape
                else if (e.keyCode === 27) {
                    dropdown.addClass('hidden');
                    currentAutocompleteIndex = -1;
                }
            });

            // Handle click outside to close autocomplete
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#search-term, #autocomplete-dropdown').length) {
                    $('#autocomplete-dropdown').addClass('hidden');
                }
            });

            // Event types loader
            function loadEventTypes() {
                $.getJSON('/Events/GetEventTypes')
                    .done(function(data) {
                        const dropdown = $('#event-type');
                        $.each(data, function(i, item) {
                            dropdown.append($('<option>', {
                                value: item.id,
                                text: item.name
                            }));
                        });
                    })
                    .fail(function(error) {
                        console.error('Failed to load event types:', error);
                    });
            }

            // Fetch autocomplete results
            function fetchAutocompleteResults(query) {
                // Make an AJAX call to get suggestions
                $.ajax({
                    url: '/Events/GetAutocompleteResults',
                    data: { query: query },
                    success: function(data) {
                        displayAutocompleteResults(data, query);
                    },
                    error: function() {
                        // For demo purposes, create mock results if endpoint doesn't exist
                        const mockResults = getMockAutocompleteResults(query);
                        displayAutocompleteResults(mockResults, query);
                    }
                });
            }

            // Position the dropdown under the search input
            function positionAutocompleteDropdown() {
                const searchInput = $('#search-term');
                const dropdown = $('#autocomplete-dropdown');

                // Get the position and dimensions of the search input
                const inputPosition = searchInput.offset();
                const inputWidth = searchInput.outerWidth();
                const inputHeight = searchInput.outerHeight();

                // Position the dropdown
                dropdown.css({
                    top: inputPosition.top + inputHeight + 5 + 'px',
                    left: inputPosition.left + 'px',
                    width: inputWidth + 'px'
                });
            }

            // Display autocomplete results
            function displayAutocompleteResults(results, query) {
                const dropdown = $('#autocomplete-dropdown');
                dropdown.empty();

                if (!results || results.length === 0) {
                    dropdown.addClass('hidden');
                    return;
                }

                // Limit results to show
                autocompleteResults = results.slice(0, maxAutocompleteResults);
                currentAutocompleteIndex = -1;

                // Add results to dropdown
                autocompleteResults.forEach(function(result, index) {
                    const highlightedText = highlightMatch(result.text, query);
                    const item = $('<div class="autocomplete-item flex items-center">')
                        .html(`
                            <div class="mr-2 text-gray-400">
                                ${result.type === 'event' ?
                            '<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>' :
                            '<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>'
                        }
                            </div>
                            <div>
                                <div class="text-sm">${highlightedText}</div>
                                <div class="text-xs text-gray-500">${result.subtext || ''}</div>
                            </div>
                        `)
                        .data('index', index)
                        .on('click', function() {
                            selectAutocompleteItem(index);
                        });

                    dropdown.append(item);
                });

                // Add "more results" message if applicable
                if (results.length > maxAutocompleteResults) {
                    const moreResults = $('<div class="py-2 px-3 text-xs text-center text-gray-500 border-t">')
                        .text(`${results.length - maxAutocompleteResults} more results available...`);
                    dropdown.append(moreResults);
                }

                // Position and show dropdown
                positionAutocompleteDropdown();
                dropdown.removeClass('hidden');

                // Update position on window resize
                $(window).on('resize', function() {
                    if (!dropdown.hasClass('hidden')) {
                        positionAutocompleteDropdown();
                    }
                });
            }

            // Navigate through autocomplete items
            function navigateAutocomplete(direction) {
                const items = $('.autocomplete-item');
                if (items.length === 0) return;

                // Remove active class from current item
                items.removeClass('active');

                // Update index
                currentAutocompleteIndex += direction;

                // Wrap around if needed
                if (currentAutocompleteIndex >= items.length) {
                    currentAutocompleteIndex = 0;
                } else if (currentAutocompleteIndex < 0) {
                    currentAutocompleteIndex = items.length - 1;
                }

                // Add active class to new item and scroll if needed
                const activeItem = items.eq(currentAutocompleteIndex).addClass('active');
                const dropdown = $('#autocomplete-dropdown');

                // Scroll dropdown to keep active item visible
                const itemPosition = activeItem.position().top;
                const itemHeight = activeItem.outerHeight();
                const dropdownHeight = dropdown.height();

                if (itemPosition < 0) {
                    dropdown.scrollTop(dropdown.scrollTop() + itemPosition);
                } else if (itemPosition + itemHeight > dropdownHeight) {
                    dropdown.scrollTop(dropdown.scrollTop() + itemPosition + itemHeight - dropdownHeight);
                }
            }

            // Select an autocomplete item
            function selectAutocompleteItem(index) {
                const result = autocompleteResults[index];
                if (!result) return;

                $('#search-term').val(result.text);
                $('#autocomplete-dropdown').addClass('hidden');

                // If you want to trigger search immediately after selection
                if (validateSearch()) {
                    $('#search-button').click();
                }
            }

            // Highlight matching text
            function highlightMatch(text, query) {
                if (!query) return text;

                const regex = new RegExp('(' + query.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ')', 'gi');
                return text.replace(regex, '<span class="highlight">$1</span>');
            }

            // Generate mock autocomplete results for demo purposes
            function getMockAutocompleteResults(query) {
                query = query.toLowerCase();
                const cities = ['Athens', 'Thessaloniki', 'Patras', 'Heraklion', 'Larissa', 'Volos', 'Ioannina', 'Chania', 'Rhodes', 'Corfu', 'Santorini', 'Mykonos'];
                const venues = ['Megaron Concert Hall', 'Stavros Niarchos Foundation', 'Pallas Theater', 'Athens Concert Hall', 'Gazi Music Hall', 'Technopolis', 'Piraeus Theater', 'Acropolis Museum Hall'];
                const events = ['Greek Food Festival', 'Music Concert Series', 'Comedy Night', 'Art Exhibition', 'Dance Performance', 'Theater Play', 'Film Screening', 'Cultural Festival', 'Wine Tasting', 'Literary Evening'];

                let results = [];

                // Filter cities
                cities.filter(city => city.toLowerCase().includes(query))
                    .forEach(city => {
                        results.push({
                            text: city,
                            type: 'location',
                            subtext: 'City'
                        });
                    });

                // Filter venues
                venues.filter(venue => venue.toLowerCase().includes(query))
                    .forEach(venue => {
                        results.push({
                            text: venue,
                            type: 'location',
                            subtext: 'Venue'
                        });
                    });

                // Filter events
                events.filter(event => event.toLowerCase().includes(query))
                    .forEach(event => {
                        results.push({
                            text: event,
                            type: 'event',
                            subtext: 'Event'
                        });
                    });

                return results;
            }

            // Validate search fields and enable/disable search button
            function validateSearch() {
                const eventType = $('#event-type').val();
                const dateRange = $('#date-range').val();
                const searchTerm = $('#search-term').val();

                // Count filled fields
                let filledFields = 0;
                if (eventType) filledFields++;
                if (dateRange) filledFields++;
                if (searchTerm && searchTerm.length >= 2) filledFields++;

                // Show/hide validation message - require at least 1 field now
                const isValid = filledFields >= 1;
                $('#search-validation-message').toggleClass('hidden', isValid);

                return isValid;
            }

            // Monitor all search inputs for validation
            $('#event-type, #date-range, #search-term').on('change input', validateSearch);

            // Search button click handler
            $('#search-button').click(function() {
                if (!validateSearch()) return;

                currentPage = 1;
                $('#events-container').addClass('hidden');
                $('#loading-indicator').removeClass('hidden');
                $('#no-results').addClass('hidden');

                // Show loading state for a short while to demonstrate UI
                setTimeout(function() {
                    performSearch();
                }, 500);
            });

            // Pagination handlers
            $('#prev-page').click(function() {
                if (currentPage > 1) {
                    currentPage--;
                    $('#events-container').addClass('hidden');
                    $('#loading-indicator').removeClass('hidden');
                    setTimeout(function() {
                        performSearch();
                    }, 300);
                }
            });

            $('#next-page').click(function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    $('#events-container').addClass('hidden');
                    $('#loading-indicator').removeClass('hidden');
                    setTimeout(function() {
                        performSearch();
                    }, 300);
                }
            });

            // Event delegation for pagination numbers
            $('#page-numbers').on('click', '.page-button', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                $('#events-container').addClass('hidden');
                $('#loading-indicator').removeClass('hidden');
                setTimeout(function() {
                    performSearch();
                }, 300);
            });

            function performSearch() {
                // Get selected dates from flatpickr
                let startDate = null;
                let endDate = null;

                if (dateRangePicker.selectedDates.length > 0) {
                    startDate = dateRangePicker.selectedDates[0].toISOString().split('T')[0];
                    endDate = dateRangePicker.selectedDates.length > 1
                        ? dateRangePicker.selectedDates[1].toISOString().split('T')[0]
                        : startDate;
                }

                // Prepare search parameters
                searchParams = {
                    eventTypeId: $('#event-type').val(),
                    startDate: startDate,
                    endDate: endDate,
                    searchTerm: $('#search-term').val(),
                    page: currentPage,
                    pageSize: pageSize
                };

                // Make search request
                $.getJSON('/Events/SearchEvents', searchParams)
                    .done(function(data) {
                        // Update page data
                        totalPages = data.totalPages;
                        currentPage = data.currentPage;

                        // Clear existing content
                        $('#events-container').empty();

                        // Hide loading indicator
                        $('#loading-indicator').addClass('hidden');

                        // Update the events count
                        $('#filtered-count').text(data.totalCount || 0);

                        // Show no results message if needed
                        if (!data.events || data.events.length === 0) {
                            $('#no-results').removeClass('hidden');
                            $('#pagination').addClass('hidden');
                            return;
                        }

                        // Build event cards
                        data.events.forEach(function(event) {
                            const eventTimeClass = getEventTimeClass(new Date(event.startDateTime));
                            const card = buildEventCard(event, eventTimeClass);
                            $('#events-container').append(card);
                        });

                        // Show events container
                        $('#events-container').removeClass('hidden');

                        // Update pagination
                        updatePagination(data.totalPages > 1);
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Error performing search:', errorThrown);
                        $('#loading-indicator').addClass('hidden');
                        $('#no-results').removeClass('hidden').find('h3').text('Error searching events');
                        $('#pagination').addClass('hidden');

                        if (jqXHR.status === 400) {
                            $('#search-validation-message').removeClass('hidden').text(jqXHR.responseText);
                        }
                    });
            }

            // Helper function to build event card HTML
            function buildEventCard(event, timeClass) {
                // Format dates
                const startDate = new Date(event.startDateTime);
                const endDate = new Date(event.endTime);
                const formattedStartDate = startDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
                const formattedStartTime = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                const formattedEndTime = endDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });

                // Create venue display if venue exists
                let venueHtml = '';
                if (event.venue) {
                    venueHtml = `
                        <div class="flex items-start mb-4">
                            <svg class="h-5 w-5 text-gray-500 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            <div>
                                <p class="text-sm text-gray-600">${event.venue.name}</p>
                                ${event.venue.city ? `<p class="text-sm text-gray-500">${event.venue.city.name}</p>` : ''}
                            </div>
                        </div>
                    `;
                }

                // Create event card
                return `
                    <div class="event-card ${timeClass} rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
                        <div class="p-5">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">${event.name}</h3>
                            <div class="flex items-start mb-3">
                                <svg class="h-5 w-5 text-gray-500 mr-2 mt-0.5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <div>
                                    <p class="text-sm text-gray-600">${formattedStartDate}</p>
                                    <p class="text-sm text-gray-500">${formattedStartTime} - ${formattedEndTime}</p>
                                </div>
                            </div>
                            ${venueHtml}
                            <div class="flex justify-end">
                                <a href="/Events/Details/${event.id}" class="text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors">
                                    View Details →
                                </a>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Helper function to determine event time class
            function getEventTimeClass(eventDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const eventDay = new Date(eventDate);
                eventDay.setHours(0, 0, 0, 0);

                if (eventDay.getTime() === today.getTime()) {
                    return 'event-today';
                } else if (eventDay > today) {
                    return 'event-upcoming';
                } else {
                    return 'event-past';
                }
            }

            // Update pagination controls
            function updatePagination(show = true) {
                const paginationContainer = $('#pagination');
                const pageNumbersContainer = $('#page-numbers');

                if (!show || totalPages <= 1) {
                    paginationContainer.addClass('hidden');
                    return;
                }

                paginationContainer.removeClass('hidden');
                pageNumbersContainer.empty();

                // Enable/disable prev/next buttons
                $('#prev-page').prop('disabled', currentPage === 1);
                $('#next-page').prop('disabled', currentPage === totalPages);

                // Calculate which page numbers to show
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);

                // Adjust start if we're near the end
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }

                // Add first page if not included
                if (startPage > 1) {
                    pageNumbersContainer.append(createPageButton(1));
                    if (startPage > 2) {
                        pageNumbersContainer.append('<span class="px-3 py-2 text-gray-500">...</span>');
                    }
                }

                // Add page numbers
                for (let i = startPage; i <= endPage; i++) {
                    pageNumbersContainer.append(createPageButton(i));
                }

                // Add last page if not included
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        pageNumbersContainer.append('<span class="px-3 py-2 text-gray-500">...</span>');
                    }
                    pageNumbersContainer.append(createPageButton(totalPages));
                }
            }

            // Create page button for pagination
            function createPageButton(pageNumber) {
                const isActive = pageNumber === currentPage;
                return $('<button>', {
                    class: `page-button w-10 h-10 flex items-center justify-center border rounded-md text-sm font-medium transition-colors ${
                        isActive ? 'page-active' : 'text-gray-700 hover:bg-gray-50 border-gray-300'
                    }`,
                    'data-page': pageNumber,
                    text: pageNumber
                });
            }
        });
    </script>
}