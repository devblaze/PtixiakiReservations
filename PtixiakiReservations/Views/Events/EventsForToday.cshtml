@model IEnumerable<PtixiakiReservations.Models.Event>

@{
    ViewData["Title"] = "Events";
}

<div class="container mx-auto p-6">
    <!-- Search Panel -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
        <h3 class="text-lg font-semibold text-gray-700 mb-4">Event Search</h3>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <!-- Event Type Dropdown -->
            <div>
                <label for="event-type" class="block text-sm font-medium text-gray-700 mb-1">Event Type</label>
                <select id="event-type" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    <option value="">-- Select Event Type --</option>
                    <!-- Will be populated via AJAX -->
                </select>
            </div>

            <div class="md:col-span-2">
                <label for="date-range" class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                <div class="relative">
                    <input type="text" id="date-range" placeholder="Select date range" 
                           class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    <button id="reset-date" type="button" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <!-- Search Term -->
        <div class="mb-4">
            <label for="search-term" class="block text-sm font-medium text-gray-700 mb-1">Event Name or Location</label>
            <div class="relative">
                <input type="text" id="search-term" placeholder="Enter event name, venue, or city"
                       class="w-full border border-gray-300 rounded-md pl-10 px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                         viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                    </svg>
                </div>
            </div>
        </div>

        <div class="flex justify-between items-center">
            <p id="search-validation-message" class="text-red-500 text-sm hidden">Please fill at least 2 fields to search</p>
            <button id="search-button" disabled
                    class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                Search
            </button>
        </div>
    </div>

    <!-- Events Count Display -->
    <div id="events-count" class="text-center mb-6 text-gray-600">
        Showing <span id="filtered-count">0</span> events
    </div>

    <!-- Events Grid -->
    <div id="events-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Event cards will be loaded here dynamically -->
    </div>

    <!-- Loading Indicator -->
    <div id="loading-indicator" class="text-center py-12">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
        <p class="mt-2 text-gray-600">Loading events...</p>
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
        <div class="text-gray-500">
            <svg class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <p class="text-xl font-semibold">No events found</p>
            <p class="mt-2">Try adjusting your search criteria</p>
        </div>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="mt-8 flex justify-center space-x-2 hidden">
        <button id="prev-page" class="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">
            Previous
        </button>
        <div id="page-numbers" class="flex space-x-2">
            <!-- Page numbers will be added here -->
        </div>
        <button id="next-page" class="px-4 py-2 bg-gray-100 rounded hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">
            Next
        </button>
    </div>
</div>

<style>
    /* Event card base style */
    .event-card {
        opacity: 1;
        transition: all 0.3s ease-in-out;
        border-left: 4px solid #e2e8f0; /* Default border */
    }

    /* Today events - green accent */
    .event-today {
        background-color: #f0fff4; /* Light green background */
        border-left-color: #48bb78; /* Green accent border */
    }

    /* Upcoming events - blue accent */
    .event-upcoming {
        background-color: #ebf8ff; /* Light blue background */
        border-left-color: #4299e1; /* Blue accent border */
    }

    /* Past events - gray accent */
    .event-past {
        background-color: #f7fafc; /* Light gray background */
        border-left-color: #a0aec0; /* Gray accent border */
        opacity: 0.85; /* Slightly faded to indicate past events */
    }

    /* Pagination active page */
    .page-active {
        background-color: #4299e1;
        color: white;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            let currentPage = 1;
            let totalPages = 1;
            let pageSize = 12;
            let searchParams = {};
            let dateRangePicker;

            // Initialize Flatpickr date range picker
            dateRangePicker = flatpickr("#date-range", {
                mode: "range",
                dateFormat: "Y-m-d",
                altInput: true,
                altFormat: "F j, Y",
                conjunction: " to ",
                minDate: "today",
                defaultDate: [new Date(), new Date(new Date().setDate(new Date().getDate() + 1))],
                onChange: function(selectedDates) {
                    // Validate search when dates are selected
                    validateSearch();
                }
            });

            // Reset date button
            $('#reset-date').click(function() {
                dateRangePicker.clear();
                validateSearch();
            });

            // Load event types for the dropdown
            loadEventTypes();

            // Initialize with search for today/tomorrow events
            validateSearch();
            if ($('#search-button').prop('disabled') === false) {
                performSearch();
            }

            // Event types loader
            function loadEventTypes() {
                $.getJSON('/Events/GetEventTypes')
                    .done(function(data) {
                        const dropdown = $('#event-type');
                        $.each(data, function(i, item) {
                            dropdown.append($('<option>', {
                                value: item.id,
                                text: item.name
                            }));
                        });
                    })
                    .fail(function(error) {
                        console.error('Failed to load event types:', error);
                    });
            }

            // Validate search fields and enable/disable search button
            function validateSearch() {
                const eventType = $('#event-type').val();
                const dateRange = $('#date-range').val();
                const searchTerm = $('#search-term').val();

                // Count filled fields
                let filledFields = 0;
                if (eventType) filledFields++;
                if (dateRange) filledFields++;
                if (searchTerm) filledFields++;

                // Enable button only if at least 2 fields are filled
                const isValid = filledFields >= 2;
                $('#search-button').prop('disabled', !isValid);

                // Show/hide validation message
                $('#search-validation-message').toggleClass('hidden', isValid);

                return isValid;
            }

            // Monitor all search inputs for validation
            $('#event-type, #date-range, #search-term').on('change input', validateSearch);

            // Search button click handler
            $('#search-button').click(function() {
                if (!validateSearch()) return;
                currentPage = 1;
                performSearch();
            });

            // Pagination handlers
            $('#prev-page').click(function() {
                if (currentPage > 1) {
                    currentPage--;
                    performSearch();
                }
            });

            $('#next-page').click(function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    performSearch();
                }
            });

            // Event delegation for pagination numbers
            $('#page-numbers').on('click', '.page-button', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                performSearch();
            });

            function performSearch() {
                // Show loading state
                $('#events-container').addClass('hidden');
                $('#loading-indicator').removeClass('hidden');
                $('#no-results').addClass('hidden');
                $('#pagination').addClass('hidden');

                // Get selected dates from flatpickr
                let startDate = null;
                let endDate = null;

                if (dateRangePicker.selectedDates.length > 0) {
                    startDate = dateRangePicker.selectedDates[0].toISOString().split('T')[0];
                    endDate = dateRangePicker.selectedDates.length > 1
                        ? dateRangePicker.selectedDates[1].toISOString().split('T')[0]
                        : startDate;
                }

                // Prepare search parameters
                searchParams = {
                    eventTypeId: $('#event-type').val(),
                    startDate: startDate,
                    endDate: endDate,
                    searchTerm: $('#search-term').val(),
                    page: currentPage,
                    pageSize: pageSize
                };

                // Log search parameters for debugging
                console.log('Search parameters:', searchParams);

                // Make search request
                $.getJSON('/Events/SearchEvents', searchParams)
                    .done(function(data) {
                        // Rest of your existing search results handling code...
                        // Unchanged from your original implementation

                        // Update page data
                        totalPages = data.totalPages;
                        currentPage = data.currentPage;

                        // Clear existing content
                        $('#events-container').empty();

                        // Hide loading indicator
                        $('#loading-indicator').addClass('hidden');

                        // Update the events count
                        $('#filtered-count').text(data.totalCount || 0);

                        // Show no results message if needed
                        if (!data.events || data.events.length === 0) {
                            $('#no-results').removeClass('hidden');
                            return;
                        }

                        // Build event cards
                        data.events.forEach(function(event) {
                            const eventTimeClass = getEventTimeClass(new Date(event.startDateTime));
                            const card = buildEventCard(event, eventTimeClass);
                            $('#events-container').append(card);
                        });

                        // Show events container
                        $('#events-container').removeClass('hidden');

                        // Update pagination
                        updatePagination();
                    })
                    .fail(function(jqXHR, textStatus, errorThrown) {
                        console.error('Error performing search:', errorThrown);
                        $('#loading-indicator').addClass('hidden');
                        $('#no-results').removeClass('hidden').find('p.text-xl').text('Error searching events');

                        if (jqXHR.status === 400) {
                            $('#search-validation-message').removeClass('hidden').text(jqXHR.responseText);
                        }
                    });
            }

            // Helper function to build event card HTML
            function buildEventCard(event, timeClass) {
                // Format dates
                const startDate = new Date(event.startDateTime);
                const endDate = new Date(event.endTime);
                const formattedStartDate = startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                const formattedStartTime = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
                const formattedEndTime = endDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });

                // Determine badge style based on event time
                let badgeClass = '';
                let badgeText = '';

                if (timeClass === 'event-today') {
                    badgeClass = 'bg-green-500';
                    badgeText = 'Today';
                } else if (timeClass === 'event-upcoming') {
                    badgeClass = 'bg-blue-500';
                    badgeText = 'Upcoming';
                } else {
                    badgeClass = 'bg-gray-500';
                    badgeText = 'Past';
                }

                // Create the reservation button or message based on event timing
                let reservationElement = '';
                if (timeClass === 'event-past') {
                    reservationElement = `<span class="text-sm text-gray-500 italic">Reservations closed</span>`;
                } else {
                    reservationElement = `<a href="/Reservation/SelectSeats?EventId=${event.id}&VenueId=${event.venueId}" 
                                     class="bg-blue-500 text-white text-sm px-4 py-2 rounded shadow hover:bg-blue-600 transition-colors">
                                     Reservation
                                  </a>`;
                }

                // Build and return the card HTML
                return `<div class="event-card ${timeClass} shadow-md rounded-lg overflow-hidden transition-transform duration-300 hover:shadow-lg hover:-translate-y-1">
                            <div class="p-4">
                                <div class="flex justify-between items-center mb-3">
                                    <div class="text-xs inline-flex items-center">
                                        <span class="${badgeClass} text-white px-2 py-1 rounded font-medium">${badgeText}</span>
                                        <span class="ml-2 text-gray-500">${formattedStartDate}</span>
                                    </div>
                                </div>
                                
                                <h3 class="text-xl font-bold text-gray-800">${event.name}</h3>
                                <p class="text-sm text-gray-600">${formattedStartDate} ${formattedStartTime} – ${formattedEndTime}</p>
                                
                                <div class="mt-3 text-sm text-gray-700 space-y-1">
                                    <p><span class="font-medium">Venue:</span> ${event.venue.name}</p>
                                    <p><span class="font-medium">Address:</span> ${event.venue.address}</p>
                                    <p><span class="font-medium">City:</span> ${event.venue.city.name}</p>
                                    <p><span class="font-medium">Postal Code:</span> ${event.venue.postalCode}</p>
                                    <p><span class="font-medium">Phone:</span> ${event.venue.phone}</p>
                                </div>
                                
                                <div class="mt-4 flex justify-between items-center">
                                    <a href="/Venue/Details/${event.venueId}" class="text-sm text-blue-500 hover:underline">Details</a>
                                    ${reservationElement}
                                </div>
                            </div>
                        </div>`;
            }

            // Update pagination controls
            function updatePagination() {
                if (totalPages <= 1) {
                    $('#pagination').addClass('hidden');
                    return;
                }

                // Update buttons state
                $('#prev-page').prop('disabled', currentPage === 1);
                $('#next-page').prop('disabled', currentPage === totalPages);

                // Build page numbers
                const $pageNumbers = $('#page-numbers');
                $pageNumbers.empty();

                // Determine which page numbers to show
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);

                // Adjust if we're near the end
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }

                // Add first page button if not included
                if (startPage > 1) {
                    $pageNumbers.append(`<button class="page-button px-3 py-1 rounded" data-page="1">1</button>`);
                    if (startPage > 2) {
                        $pageNumbers.append(`<span class="px-1 py-1">...</span>`);
                    }
                }

                // Add page numbers
                for (let i = startPage; i <= endPage; i++) {
                    const activeClass = i === currentPage ? 'page-active' : '';
                    $pageNumbers.append(`<button class="page-button px-3 py-1 rounded ${activeClass}" data-page="${i}">${i}</button>`);
                }

                // Add last page button if not included
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        $pageNumbers.append(`<span class="px-1 py-1">...</span>`);
                    }
                    $pageNumbers.append(`<button class="page-button px-3 py-1 rounded" data-page="${totalPages}">${totalPages}</button>`);
                }

                // Show pagination
                $('#pagination').removeClass('hidden');
            }

            // Helper function to determine time class based on event date
            function getEventTimeClass(eventDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const eventDateOnly = new Date(eventDate);
                eventDateOnly.setHours(0, 0, 0, 0);

                if (eventDateOnly.getTime() === today.getTime()) {
                    return "event-today";
                } else if (eventDateOnly > today) {
                    return "event-upcoming";
                } else {
                    return "event-past";
                }
            }
        });
    </script>
}